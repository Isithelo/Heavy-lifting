 



<div class="panel panel-default">
    <div id="containers" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
</div>
<div id="selectedMarker"></div>
<div class="row">


   


</div>
 <div class="row">
    <div class="col-md-12"><div id="cal-heatmap" style="overflow: auto;text-align: center;"></div></div>
    </div>
 <div class="row">
    <div class="col-md-12"><div id="onClick-placeholder">Only items in color are available on the server.</div></div>
</div>
<div id="selectedMarker"></div>


<script type="text/javascript">
    console.log( 'Template Loading : plugins/entanglement/views/analytics/stats' )
    console.log( '--------------------------------------------------------------')

    var data =[];
    var seriesChart = []
    var colours = [
    'rgba(67,224,177,0.5)',
    'rgba(3,85,159,0.5)',
    'rgba(88,206,228,0.5)',
    'rgba(234,38,42,0.5)'
    ]


var calendarData =[]
///////////////////////////////// 
//////  GET SCADA DATA    //////
/////////////////////////////// 
function getScada(){
  jQuery.ajax({
   'async': true,
   'global': false,
   'url': '/entanglement/getscada',
   'success': function (dataSchemaObject) {
     var scadadata = JSON.parse(dataSchemaObject)
     for (var i = 0; i < scadadata.length; i++) {
      for (var j = 0; j < scadadata[i].entry.length; j++) {
        var temp = scadadata[i].entry[j]
        var name = temp.date
        var b = "-";
        var position = 4;
        var output = [name.slice(0, position), b, name.slice(position)].join('');
        var b = "-";
        var position = 7;
        var output = [output.slice(0, position), b, output.slice(position)].join('');
        calendarData.push({
          "date":output,
          "badge":false,
          "entry": scadadata[i].entry[j]
        })
      }
    }
calendarData.sort(function(a, b){
       var dateA=new Date(a.date), dateB=new Date(b.date)
    return dateA-dateB //sort by date ascending
})
 
    heatmap(calendarData)
    getdata()
  }
});
}

///////////////////////////// 
//////  INITIALISE    //////
/////////////////////////// 
$('document').ready(function(){
    getScada()
 
})

 ///////////////////////////// 
//////  HEAT MAP      //////
/////////////////////////// 
function heatmap(datas){
  $('#cal-heatmap').html('')
  var parserData = function (data) {
    var dataJSON = {};
    for(var i=0; i<data.length; i++) {
    var date = new Date(data[i].date); // Date of activity 
    var sec = date.getTime()/1000; // Convert to sec
    // Pair "Key-Value" for calendar data
    if(dataJSON[sec]) {
      dataJSON[sec]++;
    } else {
      dataJSON[sec] = 1;
    }
  }
  return dataJSON;
}
var cal = new CalHeatMap();
cal.init({
 itemSelector: "#cal-heatmap",
 domain: "month",
 subDomain: "day",
 legendColors: {
  empty: "#ededed",
  min: "#ededed",
  max: "#337ab7",
},    
onClick: function(date, nb) {
  $("#onClick-placeholder").html("<b>" +
    date + "</b> <br/>with <b>" +
    (nb === null ? "0" : nb) + "</b> items<p></p>"
    );
  $("#onClick-placeholder").append("<a onclick='viewItem(this.id)' id='"+date+"' class='btn btn-default'>View</a>");
},
legend: [1,2,3,4,5],
itemNamespace: "domainDynamicDimension",
 // range: 11,
//start: new Date(2016, 10),
range: 9,
  start:moment.utc(moment().subtract(8, 'months')).valueOf(),//get moment less range -1 months , then convert to UTC value of for cal heat map.
   data: datas, // Dates Array
   afterLoadData: parserData      // Parser function
 });
}



//////////////////////////////////////// 
//////  FORMAT FOR HIGHCHARTS    //////
//////////////////////////////////////
function getdata(){
  var cylinderMax=[]
  var BoomScale=[]
  var ConveyorScale=[]    
  var BoomScaleTotal=0
  var ConveyorScaleTotal=0  
  var AverageTPH = 0;
  var AverageTPH1 = 0;
  var count = 0;
  var catagories=[]

  for (var i = 0; i < calendarData.length; i++) {
        //console.log(calendarData[i]['entry']["coloums"])
        BoomScale.push((calendarData[i]['entry']["coloums"]["E641_CV01_WIT01A-STA_Analog"]["Sum"]/3600) )
        ConveyorScale.push((calendarData[i]['entry']["coloums"]["E790_WE01_WIT01a-STA_Analog"]["Sum"]/3600)  )
        AverageTPH = AverageTPH + ((calendarData[i]['entry']["coloums"]["E641_CV01_WIT01A-STA_Analog"]["Average"]) )
        AverageTPH1 = AverageTPH1 + ((calendarData[i]['entry']["coloums"]["E790_WE01_WIT01a-STA_Analog"]["Average"]) )
        count = count + 1 ;
        BoomScaleTotal  = BoomScaleTotal + ((calendarData[i]['entry']["coloums"]["E641_CV01_WIT01A-STA_Analog"]["Sum"]/3600)  )
        ConveyorScaleTotal = ConveyorScaleTotal + ((calendarData[i]['entry']["coloums"]["E790_WE01_WIT01a-STA_Analog"]["Sum"]/3600)  )
        catagories.push(calendarData[i]["date"])
    };
    seriesChart.push(
    {
        data: BoomScale,
        color: colours[0],
        name : "E641_CV01_WIT01A-STA_Analog - Boom conveyor 10 sec Avg belt weigher",

        type : 'line',
        marker: {
            fillColor: 'white',
            lineWidth: 1,
            lineColor: colours[0]
        },
    },{
        data: ConveyorScale,
        color: colours[1],
        name : "E790_WE01_WIT01a-STA_Analog - LOS Feed Conveyor Weightometer",
        id: 'primary',
        marker: {
            fillColor: 'white',
            lineWidth: 1,
            lineColor: colours[1]
        },
    } , {
        name: '10-day SMA',
        linkedTo: 'primary',
        showInLegend: true,
        type: 'trendline',
        algorithm: 'SMA',
        periods: 10,
        lineWidth: 4,
        color: 'red'
    }
    )

    

 //array.sortBy(function(o){ return o.date });

 
 highchartsStats(seriesChart,catagories)
}



function highchartsStats(seriesChart,catagories) {
 jQuery('#containers').highcharts({
    title: {
        text: 'Daily Tonnage Moved by Bucket Wheel Reclaimer',
            x: -20 //center
        },
        xAxis: {
            categories: catagories, 
        },
        chart: {
            zoomType: 'x'
        },
        plotOptions: {
            series: {
                cursor: 'pointer',
                point: {
                    events: {
                        click: function () {
                            html=""
                            html+='<div class="panel panel-default"><div class="panel-body">'
                            html+='<button type="button" class="btn btn-default">View</button>    '
                            html+='Date: ' + this.category + ', value: ' + this.y
                            html+='</div></div>'
                            jQuery("#selectedMarker").html(html)

                        }
                    }
                }
            }
        },
        credits:false,
        yAxis: {
            title: {
                text: 'Tonnes Moved (Tonnes)'
            },

        },
        tooltip: {
            valueSuffix: ' Tonne'
        },
        legend: {
            //layout: 'vertical',
            //align: 'bottom',
            //verticalAlign: 'middle',
            borderWidth: 0
        },
        series: seriesChart,

    });
}







</script>
