
<style type="text/css">
	nav[data-toggle='toc'] {
  margin-top: 30px;
}

/* small screens */
@media (max-width: 768px) {
  /* override the Affix plugin so that the navigation isn't sticky */
  nav.affix[data-toggle='toc'] {
    position: static;
  }

  /* PICK ONE */
  /* don't expand nested items, which pushes down the rest of the page when navigating */
  nav[data-toggle='toc'] .nav .active .nav {
    display: none;
  }
  /* alternatively, if you *do* want the second-level navigation to be shown (as seen on this page on mobile), use this */
  nav[data-toggle='toc'] .nav .nav {
    display: block;
  }
}
   .spinner {
    width: 100px;
    margin-bottom: 0px!important;
  }
  .spinner input {
    text-align: right;
  }
  .input-group-btn-vertical {
    position: relative;
    white-space: nowrap;
    width: 1%;
    vertical-align: middle;
    display: table-cell;
  }
  .input-group-btn-vertical > .btn {
    display: block;
    float: none;
    width: 100%;
    max-width: 100%;
    padding: 4px !important;
    font-size: 6px;
    margin-left: -1px;
    position: relative;
    border-radius: 0;
  }
  .input-group-btn-vertical > .btn:first-child {
    border-top-right-radius: 4px;
  }
  .input-group-btn-vertical > .btn:last-child {
    margin-top: -2px;
    border-bottom-right-radius: 4px;
  }
  .input-group-btn-vertical i{
    position: absolute;
    top: 0;
    left: 4px;
  }
</style>
<div id="panelRoot">
	
<div  id="name"></div>
<div style="" id="more"></div>

<p></p>
<p></p>
{{#if messages.info}}
<div role="alert" class="alert alert-info">
	{{#each messages.info}}
	<div>{{msg}}</div>
	{{/each}}
</div>
{{/if}}
{{#if messages.error}}
<div role="alert" class="alert alert-danger">
	{{#each messages.error}}
	<div>{{msg}}</div>
	{{/each}}
</div>
{{/if}}
<div>
 
	<!-- Tab panes -->
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="home">
			<div class="row">
				<div class="col-md-4">
					<p></p><div id="expandTree"></div>
					<div id="assyTree"><pre><i class="fa fa-spinner fa-spin fa-fw"></i><span class=" ">Loading...</span></pre></div> 
					<p></p>
					<!-- <pre id="treeclick"></pre> -->
					<div style="text-align: center">
						<p></p>
						<p><span id="jstreecountAssy"></span> Navigation Items
							{{#if user}}
							<small><span id="itemdetailAssy"></span></small>
							<small><span id="a_attrAssy"></span></small>
							{{/if}}
						</p>  
					</div> 
				</div>
				<div class="col-md-8">
					<div style="text-align:right">
						<button class="btn btn-success" id="saveAssembly" disabled>Update this Assembly</button>
					</div>
					<p></p>
					<div>
						<!-- Nav tabs -->
						<ul class="nav nav-tabs" role="tablist">
							<li role="presentation"   class="active"><a href="#assyCompTabless" aria-controls="assyCompTabless" role="tab" data-toggle="tab">View</a></li>				
							<li role="presentation"><a href="#Report" aria-controls="Report" role="tab" data-toggle="tab" onclick="reportcall()">Report</a></li>
							<li role="presentation"><a href="#homeAssy" aria-controls="homeAssy" role="tab" data-toggle="tab">Items</a></li>
							<li role="presentation"><a href="#JSON" aria-controls="JSON" role="tab" data-toggle="tab">JSON</a></li>
							<li role="presentation"><a href="#History" aria-controls="History" role="tab" data-toggle="tab">History</a></li>
							<!-- <li role="presentation"><a href="#messages" aria-controls="messages" role="tab" data-toggle="tab">Filter</a></li>-->
						</ul>
						<!-- Tab panes -->
						<div class="tab-content">
							<div role="tabpanel" class="tab-pane " id="JSON">
								<h3>The Javascript Object</h3>
								<p>The information shown below is the combined assembly javascript object.</p>
								<pre id="JSONArea">There are currently no items on this JSON.</pre>
							</div>
							<div role="tabpanel" class="tab-pane " id="Report">
								<p></p>
								<div style="text-align: right;">
									<div class="btn-group" role="group" aria-label="..." >
										<button id="export" type="button" class="btn btn-default btn-sm"><i class="far fa-file-word"></i> Export to Word</button>
									</div>
								</div>
								<div id="report" ></div>
							</div>
							<div role="tabpanel" class="tab-pane " id="homeAssy">
								<p></p>
								<div id="itemsAssy"></div>	
							</div>
							<div role="tabpanel" class="tab-pane " id="History">
								<div id="itemHistory"></div>
							</div>
							<div role="tabpanel" class="tab-pane active" id="assyCompTabless"><div id="searchAreaAssy"></div>
							<div id="assyCompTable">
								<div class="row">
									<div class="col-md-3">
									</div>
									<div class="col-md-7">
									</div>
									<p></p>  
									<div id='assyForm' style="/*overflow: auto;*/">
									</div>
								</div>
								<div class="well"><div style=" padding: 5px"><div style="padding:25px"><h3>Heads up! <small>Click on the nodes of the navigation tree to modify this assembly.</small></h3><div style="text-align: center"><p>To get started view the <a href="/documentation">Documentation section</a> on this site or sign in / sign up.</p></div> </div></div></div>
							</div><div id="qtybuttons"></div>
						</div>
					</div>
				</div>
			</div>	
		</div>
		<div role="tabpanel" class="tab-pane" id="profile">
			<div role="tabpanel" class="tab-pane active" id="Tablecomponent">
				<div class="row">
					<div class="col-md-3">
					</div>
					<div class="col-md-7">
					</div>
				</div> 
				<p></p>  
				<div id='formDelivery' style="/*overflow: auto;*/">
				</div>		 
			</div>
		</div>
	</div>
</div>

</div>

<style type="text/css">



.dt-buttons{
	padding-bottom: 15px;
}
tr.selected {
	background-color: #337ab7;
	color: white;
}
.table-hover > tbody > tr.selected:hover {
	background-color: #337ab7;
	color: white;
}
.spinner {
	width: 80px;
	margin-bottom: 13px;
}
.spinner input {
	text-align: right;
}
.input-group-btn-vertical {
	position: relative;
	white-space: nowrap;
	width: 1%;
	vertical-align: middle;
	display: table-cell;
}
.input-group-btn-vertical > .btn {
	display: block;
	float: none;
	width: 100%;
	max-width: 100%;
	padding: 8px;
	margin-left: -1px;
	position: relative;
	border-radius: 0;
}
.input-group-btn-vertical > .btn:first-child {
	border-top-right-radius: 4px;
}
.input-group-btn-vertical > .btn:last-child {
	margin-top: -2px;
	border-bottom-right-radius: 4px;
}
.input-group-btn-vertical i {
	position: absolute;
	top: 0;
	left: 4px;
}
.fa-plus {
	margin-top: 3px;
	font-size: 10px !important;
}
.fa-minus {
	margin-top: 4px;
	font-size: 10px !important;
}

.selectable:hover{
	background-color: #e2e2e2;
}

</style>

<script type="text/javascript">
	assemblyQuery[0].items =  {{{query}}}
	assemblyQuery.length = 1;
	console.log('Template Load : Assembly')
	console.log('assemblyQuery : ' , assemblyQuery)
	console.log('-------------------------------------------')
	var idTree
	var idComponent
	tempJson = {}

	var report = []
	$('#searchAreaAssy').append('<p></p><div style="padding-top:15px" class="collapse" id="collapseExampleAssy"> <div ><div id="AdvancedSearchAssy"></div></div></div>')
	$('#searchAreaAssy').append('<p></p><div style="padding-top:15px" class="collapse" id="collapseExampleHeadings"> <div><div id="AdvancedSearchHead"></div></div></div>')

//Assembly Combinator
$('#saveAssembly').on('click', function() {
	if(!assemblyQuery[0].items.elementID){
		assemblyQuery[0].items.elementID = assemblyQuery[0].items._id
	} 
	jQuery.ajax({
		'url': '/'+assemblyQuery[0].route+'/create',
		'type': 'POST', 
		'dataType': 'json',
		'contentType': 'application/json', 
		'data': JSON.stringify(assemblyQuery[0].items),
		'success': function (dataSchemaObject) {
			$('#myModal').modal('hide')
			window.location.reload()
		},
		'error' :function (dataSchemaObject) {
			console.log(dataSchemaObject)
			$('#myModal').modal('hide')
			pageLoad(databaseid)
			if (parentItem.route) {
				window.location = parentItem.assemblyQuery[0].route
				var temp = '/signin'
				window.dataSchemaObject
			} else {
				var temp = '/signin'
				window.temp
			}
		},
	});  
});


///////////////////////////// 
//////  INITIALISE    //////
/////////////////////////// 
$('document').ready(function(){
	  //The route defines the plugin to use when posting , getting and loading.
	  $('#itemHistory').html('<h4>Revision History</h4><div class=""><div class="row"><div class="col-md-12" id="'+assemblyQuery[0].items.elementID+'_histload"><p style="text-align:center"><button id="'+assemblyQuery[0].items.elementID+'_hist" onclick="loadHistory(this.id)" class="btn btn-primary"><i class="fas fa-cloud-download-alt"></i> Get revision history</button></p></div> </div>')
if (assemblyQuery[0].items.childType) {
	  templateloadingassy(assemblyQuery[0].items.childType ,'false','components')
	  exportWord ()
	} else {
		$('#panelRoot').html('No default assembly defined.')
	}
	

	})


//////////////////////////////////////////////
//////  LOOP FOR THE REPORT LOADING    //////
////////////////////////////////////////////
function reportcall(){
	$('#report').html('')
	$('#report').append('<h1>'+assemblyQuery[0].items['name']+'</h1>')
	$('#report').append('<p>'+assemblyQuery[0].items['detail']+'</p>')
	maxWindow()
	for (var j = 0; j < 50; j++) { 
		$('#report').append('<div id="'+j+'_locations" ></div> <div id="'+j+'_items" ></div></div>')
	}	 
	for (var i = 0; i < assemblyQuery[1].query3.length; i++) { 
		if (assemblyQuery[0].items.entry.assembly) {
			headings('dataset.query','dataset.query1[0]',assemblyQuery[1].query3[i],assemblyQuery[1].query3[i].entry.order)  
			switch (true){
				case (assemblyQuery[1].query3[i].entry.displaytype == 'glossary'):
				if(assemblyQuery[1].query3[i].entry.order) {
					$('#'+assemblyQuery[1].query3[i].entry.order+'_items').replaceWith('<table id="'+assemblyQuery[1].query3[i].entry.order+'_items'+'" class="table table-bordered table-hover"><thead><tr><th>Item</th><th>Description</th></tr></thead><tbody></tbody</table>'); 
							//console.log('entering')
						}  
						break;
						default :

						break;
					}
					for ( key in  assemblyQuery[0].items.entry.assembly) {
						for(keyItems in assemblyQuery[0].items.entry['assembly'][key]) {
							if (assemblyQuery[0].items.entry["assembly"][key][keyItems]["idTree"] == assemblyQuery[1].query3[i].elementID ) {
								loadReportAssembly(
							assemblyQuery[0].items.entry["assembly"][key][keyItems]["idComponent"],//idsAssy
							'false',//render
							'components',//routingThisQuery
							assemblyQuery[1].query3[i],//elementID
							assemblyQuery[1].query3[i].entry.displaytype,//displaytype
							assemblyQuery[1].query3[i].entry.order,//order
							keyItems,//the id of the item in question.
							)

							}
						}
					}
			//footer('dataset.query','dataset.query1[0]',assemblyQuery[1].query3[i],assemblyQuery[1].query3[i].entry.order)
		} else {
			$('#report').html('This report is empty')
		}
	}




//itemDetails()

}

/////////////////////////////////
//////  DEBUGGING METHOD  //////
///////////////////////////////
function itemDetails(){
	var moveLeft = 20;
	var moveDown = 10;
	$('.selectable').hover(function(e) {
		$('#pop-up-details').html('')
		$(this).each(function() {
			$.each(this.attributes,function(i,a){
				$('#pop-up-details').append('<p>'+a.name+' : '+a.value+'</p>')
			})
		})
		$('div#pop-up').show()
		.css('top', e.pageY + moveDown)
		.css('left', e.pageX + moveLeft)
		.appendTo('body');
	}, function() {
		$('div#pop-up').hide();
	});
	$('.selectable').mousemove(function(e) {
		$("div#pop-up").css('top', e.pageY + moveDown).css('left', e.pageX + moveLeft);
	});

}



/////////////////////////////////
//////  REPORT HEADINGS   //////
///////////////////////////////
function headings(data,dataTree,elementID,order){

	var html = '<div '
	{{#if user}}
	html += 'class="selectable" style="cursor: pointer;"'
	{{/if}}
	html +=' id="'+create_uid()+'" data-ids="'+elementID.elementID+'" data-form="'+assemblyQuery[1].query.childType+'" data-toggle="modal" data-target="#myModal" data-parentid="'+elementID.parentid+'" data-routing="components" onclick="clickEdit(this.id)" >'
 	//console.log(data,dataTree)
 	html += '<h3  >'
 	html += elementID.entry.text
 	html += '</h3>'
 	html += '<p>'
 	html += elementID.entry.detail
 	html += '</p>'
 	html += '<p>'
 	html += '</p></div>'

 	if(order) {
 		$('#'+order+'_locations').append(html)
		//console.log('entering')
	} else {
		//$('#report').append(html); 
	}
}


////////////////////////////////
//////  REPORT FOOTERS   //////
//////////////////////////////
function footer(data,dataTree,elementID,order){
	var html = '<p></p><button class="btn btn-default btn-xs" id="'+create_uid()+'" data-ids="'+elementID.elementID+'" data-toggle="modal" data-target="#myModal" onclick="selectNodes(this.id)"><i class="far fa-edit"></i></button>'
	if(order) {
		$('#'+order+'_locations').append(html)
		//console.log('entering')
	} else {
		//$('#report').append(html); 
	}
}




function selectText(containerid) {
	if (document.selection) {
		var range = document.body.createTextRange();
		range.moveToElementText(document.getElementById(containerid));
		range.select();
	} else if (window.getSelection) {
		var range = document.createRange();
		range.selectNode(document.getElementById(containerid));
		window.getSelection().removeAllRanges();
		window.getSelection().addRange(range);
	}
}


///////////////////////////////////////////////
////////  AJAX IN THE FULL REPORT DATA ///////
/////////////////////////////////////////////
function loadReportAssembly(idsAssy,render,routingThisQuery,elementID,displaytype,order,thisitemKey){
//console.log(idsAssy,render,routingThisQuery,elementID,displaytype,order)
//var render = false//Use this render variable to either render the template or only send the template data.
//var routingThisQuery = 'components'//Where is the information stored.
//var ids = '5909c9af545fa738c45954e1'//Which data grouping is being called. i.e what is the parentid of the items to call.
jQuery.ajax({
	'async': true,
	'global': false,
	'url': '/' + routingThisQuery + '/templateload?ids='+idsAssy+'&render='+render+'&elementID='+elementID,
	'success': function (dataSchemaObject) {
		var dataset = JSON.parse(dataSchemaObject)
		report[idsAssy] = dataset
						var temp = dataFormatComp(dataset.query3,dataset.query2)//format the data for use , splicing of form and dataset
						if (assemblyQuery[0].items.entry['assembly']) {//is there an assembly?
						for(keysTreeGroups in assemblyQuery[0].items.entry['assembly']) {//find every element in the assembly
							for(keyItems in assemblyQuery[0].items.entry['assembly'][keysTreeGroups]) {
								if (keyItems == thisitemKey) {
									switch (true){
										case (displaytype == 'list'):
										var tempVar = reportDetailList(temp['modifiedListData'] , keyItems,elementID , assemblyQuery[0].items.entry['assembly'][keysTreeGroups][keyItems]['qty'])
										break;
										case (displaytype == 'glossary'):
										var tempVar = reportDetailGlossary(temp['modifiedListData'] , keyItems,elementID , assemblyQuery[0].items.entry['assembly'][keysTreeGroups][keyItems]['qty'])
										break;
										default :
										if (elementID.entry.headings) {
											var headings = elementID.entry.headings
										} else {
											var headings = ['Description','Value','Units','Detail']
										}
 										var tempVar = reportDetailTable(temp['modifiedListData'] , keyItems,elementID , assemblyQuery[0].items.entry['assembly'][keysTreeGroups][keyItems]['qty'],headings)
										break;
									}
							//console.log(keysTreeGroups)
							if (tempVar){
								//console.log(tempVar)
								report[idsAssy]['order'] = order
								report[idsAssy]['html'] = tempVar
							//This is for the ordering of the table reports
							if(order) {
								$('#'+order+'_items').append(report[idsAssy]['html']); 
							//console.log('entering')
						}  
					}  
				}
			}
		}
	} else {
						//$('#report').append('tempVar');
					}
				}
			});
}


function clickEdit(idItem){
 	var formid = $( "#"+idItem ).data( "form");
	var parentid = $( "#"+idItem ).data( "parentid");
	var routing = $( "#"+idItem ).data( "routing");
	var ids = $( "#"+idItem ).data( "ids");
	var html =''
	html+='<h3>Report Edit</h3><p>What would you like to do with this item.</p><div style="text-align:center">'
	html+='<div  class="btn-group" role="group" aria-label="..."> '
	html+='<button type="button" class="btn btn-default" id="'+create_uid()+'" data-form="'+formid+'" data-parentid="'+parentid+'" data-routing="'+routing+'" data-ids="'+ids+'" onclick="editItem(this.id)">Edit Item</button> '
	html+='<button type="button" class="btn btn-default" id="'+create_uid()+'" data-ids="'+ids+'" onclick="selectNodes(this.id)" >Add Items</button> '
	//html+='<button type="button" class="btn btn-danger">Remove all Items</button>'
	html+='</div> '
	html+='</div>'
	$("#formAreaModal").html(html)
}

function editItem(idItem){
	var formid = $( "#"+idItem ).data( "form");
	var parentid = $( "#"+idItem ).data( "parentid");
	var routing = $( "#"+idItem ).data( "routing");
	var ids = $( "#"+idItem ).data( "ids");
	loadformModal(formid,ids,'componentedit',parentid,'',{"elementID" : ids},'formAreaModal',routing)

}


///////////////////////////////////////////////
////////  AJAX IN THE DATASET REQUIRED ///////
/////////////////////////////////////////////
function templateloadingassy(idsAssy,render,routingThisQuery){
	if (idsAssy.length ==1) {
		//console.log('entering')
	} else {
	//var render = false//Use this render variable to either render the template or only send the template data.
	//var routingThisQuery = 'components'//Where is the information stored.
	//var ids = '5909c9af545fa738c45954e1'//Which data grouping is being called. i.e what is the parentid of the items to call.
	jQuery.ajax({
		'async': true,
		'global': false,
		'url': '/' + routingThisQuery + '/templateload?ids='+idsAssy+'&render='+render,
		'success': function (dataSchemaObject) {

			switch(true){
				case (assemblyQuery.length == 1 ) :
				var dataSchemaObject = JSON.parse(dataSchemaObject)
				assemblyQuery.push(dataSchemaObject)
				assemblyQuery[assemblyQuery.length-1]['formids'] = create_uid()
				assemblyQuery[assemblyQuery.length-1]['route'] = routingThisQuery

						//DEFINE THE VARIABLE SETS
						items = assemblyQuery[1].query
						query1 = assemblyQuery[1].query1
						query2 = assemblyQuery[1].query2
						query3 = assemblyQuery[1].query3
						query4= assemblyQuery[1].query4
						tablelistdata = assemblyQuery[1].query3;
						templateload = assemblyQuery[1].templateload
						jstreetemplate = assemblyQuery[1].jstreetemplate
						if (items.entry.moreinfotemp) { 
						//more info button.
						var html = '<a title="Click for design page." type="button" href="/Components/'+items.entry.moreinfotemp+'/'+templateload+'" class="btn btn-primary" style="position: absolute;right: 20px"><i class="fa fa-calculator" aria-hidden="true" ></i></a>'
						$('#more').html(html)
					}
						headingsAndStuff(assemblyQuery[0].items)//Populate page headings and descriptions.
						sortPrimary(assemblyQuery[1].query3,assemblyQuery[1].query3,assemblyQuery[1].query2)//First sorting of data
						uniqueIdforcformButton(assemblyQuery[1].formids,'formDelivery')//create a unique form id
						var temp = dataFormatComp(assemblyQuery[1].query3,assemblyQuery[1].query2)//format the data for use , splicing of form and dataset
						//datableload(temp['modifiedTableListData'],assemblyQuery[1].formids,temp['modifiedListData'])//load the dataset
						assyTreeLoad('assyTree',dataJStreeConvert (temp['modifiedTableListData']))//format and load the tree into the page.
						break;
						case (assemblyQuery.length > 1 ) :
						var dataSchemaObject = JSON.parse(dataSchemaObject)
						assemblyQuery[2] = dataSchemaObject
						assemblyQuery[assemblyQuery.length-1]['formids'] = create_uid()
						assemblyQuery[assemblyQuery.length-1]['route'] = routingThisQuery
						$('#assyCompTable').html('<div class="row"><div class="col-md-3"></div><div class="col-md-7"></div></div> <p></p><div id="assyForm" style="/*overflow: auto;*/"></div>')
						uniqueIdforcformButton(assemblyQuery[2].formids,'assyForm')//create a unique form id
						var temp = dataFormatComp(assemblyQuery[2].query3,assemblyQuery[2].query2)//format the data for use , splicing of form and dataset
						datableload(temp['modifiedTableListData'],assemblyQuery[2].formids,temp['modifiedListData'],assemblyQuery[2].query)//load the dataset
						break;
					}	

				}
			});
}
}

/////////////////////////////////////////////////////////
////////  AJAX IN THE ITEM TREE DATA FOR EDITING ///////
///////////////////////////////////////////////////////
function templateloadingCompTree(idsAssy,render,routingThisQuery,idTree){
	$('#itemdetailAssy').html('<div id="formIdHeresAssy" style="color: grey" ></div>')
	$('#formIdHeresAssy').html('id : '+idTree)  
	$('#a_attrAssy').html('<div id="formIdHeresAssyA" style="color: grey" ></div>')
	$('#formIdHeresAssyA').html('a_attr : '+idsAssy) 
	if (idsAssy.length ==1) {
		//console.log('entering')
	} else {
	//var render = false//Use this render variable to either render the template or only send the template data.
	//var routingThisQuery = 'components'//Where is the information stored.
	//var ids = '5909c9af545fa738c45954e1'//Which data grouping is being called. i.e what is the parentid of the items to call.
	jQuery.ajax({
		'async': true,
		'global': false,
		'url': '/' + routingThisQuery + '/templateload?ids='+idsAssy+'&render='+render,
		'success': function (dataSchemaObject) {
			var dataSchemaObject = JSON.parse(dataSchemaObject)
			assemblyQuery[2] = dataSchemaObject
			assemblyQuery[assemblyQuery.length-1]['formids'] = create_uid()
			assemblyQuery[assemblyQuery.length-1]['route'] = routingThisQuery
			$('#assyCompTable').html('<div class="row"><div class="col-md-3"></div><div class="col-md-7"></div></div> <p></p><div id="assyForm" style="/*overflow: auto;*/"></div>')
						uniqueIdforcformButton(assemblyQuery[2].formids,'assyForm')//create a unique form id
						var temp = dataFormatComp(assemblyQuery[2].query3,assemblyQuery[2].query2)//format the data for use , splicing of form and dataset
						datableloadTreeItem(temp['modifiedTableListData'],assemblyQuery[2].formids,temp['modifiedListData'],assemblyQuery[2].query,temp['headingList'])//load the dataset	
					}
				});
}
}



function sortPrimary(tablelistdata,query3,query2){
	tablelistdata.sort(function(a, b) {
		if (a.entry.order && b.entry.order) {
			return parseFloat(a.entry.order) - parseFloat(b.entry.order);
		}
	});
	query3.sort(function(a, b) {
		if (a.entry.order && b.entry.order) {
			return parseFloat(a.entry.order) - parseFloat(b.entry.order);
		}
	});
	query2.sort(function(a, b) {
		return parseFloat(a.entry.order) - parseFloat(b.entry.order);
	});
}

///////////////////////////////////////////////////
////        REQUIRED FORMATING OF DATA        //// 
/////////////////////////////////////////////////
function dataFormatComp(tablelistdata,query2){
	var tempVar = []
	var tempVar1 = []
	var tempVar2 = []
	var headingTemp = []
	for (var i = 0; i < tablelistdata.length; i++) {
		tempVar1 = []
		for(key in tablelistdata[i].entry){
			tempVar = []
			for (var j = 0; j < query2.length; j++) {
				if (query2[j].elementID == key) {
					headingTemp.push(query2[j]['entry']['description'])
					tempVar = {
						'description' : query2[j]['entry']['description'],
						'value' : tablelistdata[i].entry[query2[j].elementID],
						'units' : query2[j]['entry']['units'],
						'detail' : query2[j]['entry']['detail'],
						'id' : query2[j]['elementID'] ,
						'form' : query2[j]['parentid'] ,
						'parentid' : tablelistdata[i].parentid,
						'routing' : 'database',
						'entry' : {"elementID" : query2[j]['elementID'] }
					}
				}
			}
			if (tempVar != "") {
				tempVar1.push(tempVar)
			}
		}
		tempVar2[tablelistdata[i].elementID] = tempVar1
	}
	headingTemp = jQuery.unique(headingTemp)
	var temp = []
	var temp
  //This is where the id is injected into the menu item . Crude hacky work around , not sure how to improve.
  for (var i = 0; i < tablelistdata.length; i++) {
  	for(key in tablelistdata[i].entry){
  		for (var j = 0; j < query2.length; j++) {
  			if (query2[j].elementID == key) {
  				tablelistdata[i].entry[query2[j]['entry']['description']] = tablelistdata[i].entry[query2[j].elementID]
  				delete tablelistdata[i].entry[query2[j].elementID]
  			}
  		}
  	}
		tablelistdata[i].entry.elementID = tablelistdata[i]['elementID']
      tablelistdata[i].entry.name = tablelistdata[i]['name']
      tablelistdata[i].entry.childType = tablelistdata[i]['childType']
      tablelistdata[i].entry.name = tablelistdata[i]['name']
   // tablelistdata[i].entry.detail1 = tablelistdata[i]['detail']
   tablelistdata[i].entry.userID = tablelistdata[i]['userID']
   tablelistdata[i].entry.parentid = tablelistdata[i]['parentid']
   temp.push(tablelistdata[i].entry)
}
return {
	modifiedListData : tempVar2,
	modifiedTableListData : temp,
	headingList : headingTemp
}
}


///////////////////////////////
//////  LOAD THE TABLE  //////
/////////////////////////////
function datableload(tableData,formids,modifiedListData,items) {
//General Heading error trap.  
//When the heading is only 1 item , the printing of the headings loops throguh each character . THis checks if it is an array .
if (items.entry.headings) {
	var tableHeadings = JSON.parse(JSON.stringify(items.entry.headings))
	if (!isArray(tableHeadings)) {
		tableHeadings = [tableHeadings]
	}  
} else {
	var tableHeadings = ['name','detail','userID','id','parentid','childType','description']
}
var tempVarIDs = formids+'_tableloadID'
    //inject the ID html table into the page.
    $('#'+formids).html('<table id="'+tempVarIDs+'" class="table table-bordered table-compressed table-hover " cellspacing="0" width="100%"></table>')
    //error message text
    var html = ''
    html += '<div class="alert alert-danger" role="alert"> '
    html += '<strong>'
    html += 'Oh snap!'
    html += '</strong> '
    html += 'No data found , Please let us know about this.'
    html += '</div>'
//client side error check for the tables.
if (tableData !== null) {
	if (tableData.length !== 0) {
		dataTableLoad (tableData,tempVarIDs,tableHeadings)
		loadDataTable(tempVarIDs,modifiedListData)
	} else {
		$('#'+formids).html(html)
	}
} else {
	$('#'+formids).html(html)
}
};

/////////////////////////////////////////////////
//////  LOAD THE TABLE ITEM FROM THE TREE //////
///////////////////////////////////////////////
function datableloadTreeItem(tableData,formids,modifiedListData,items,headings) {
//General Heading error trap.  
//When the heading is only 1 item , the printing of the headings loops throguh each character . THis checks if it is an array .
if (items.entry.headings) {
	var tableHeadings = JSON.parse(JSON.stringify(items.entry.headings))
	if (!isArray(tableHeadings)) {
		tableHeadings = [tableHeadings]
	}  
} else {
	var tableHeadings = ['name','detail','userID','id','parentid','childType','description']
}
var tempVarIDs = formids+'_tableloadID'
    //inject the ID html table into the page.
    $('#'+formids).html('<h3 id="nameAssyItem"><small> Reference Table</small></h3><p id="detailAssyItem"></p><table id="'+tempVarIDs+'" class="table table-bordered table-compressed table-hover " cellspacing="0" width="100%"></table>')

$('#'+formids).append('<a href="/components/default/'+items.elementID+'" type="button" target="_blank" class="btn btn-primary btn-sm"><i class="fa fa-plus" aria-hidden="true"></i> New Item</a>')
  

    //error message text
    var html = ''
    html += '<div class="alert alert-danger" role="alert"> '
    html += '<strong>'
    html += 'Oh snap!'
    html += '</strong> '
    html += 'No data found , Please let us know about this.'
    html += '</div>'


//Filter Headings of tables from here.
html='<small>Select headings to view on this table.</small>'
html+='<select class="selectpicker" multiple data-width="100%" data-actions-box="true">'
for (var i = 0; i < headings.length; i++) {
	if (jQuery.inArray(headings[i],items.entry.headings) ==-1) {
		html+= '<option value="'+headings[i]+'">'+headings[i]+'</option>'
	} else {
		html+= '<option value="'+headings[i]+'" selected >'+headings[i]+'</option>'
	}
}
html+='</select> '
$('#AdvancedSearchHead').html(html)
$('.selectpicker').selectpicker({
	style: 'btn-default',
	size: 4
});
$('.selectpicker').on('changed.bs.select', function (e) {
	var temp = $('.selectpicker').selectpicker('val');
	if (!temp) {
		$('#AdvancedSearchAssy').html('<small>Select table headings to view.</small>')	
		$('#'+tempVarIDs).html('')
	} else {
		var table = $('#'+tempVarIDs).DataTable();
		table.destroy();
		dataTableLoad (tableData,tempVarIDs,temp)
		loadDataTable(tempVarIDs,modifiedListData,headings,items.entry.headings)
	}
});


$('#nameAssyItem').prepend(items.name)
$('#detailAssyItem').html(items.detail)
//client side error check for the tables.
if (tableData !== null) {
	if (tableData.length !== 0) {
		dataTableLoad (tableData,tempVarIDs,tableHeadings)
		loadDataTable(tempVarIDs,modifiedListData,headings,items.entry.headings)
	} else {
		$('#'+formids).html(html)
	}
} else {
	$('#'+formids).html(html)
}
};



function assyTreeLoad(locationNavs,dataNav){
	if (jQuery('#'+locationNavs).jstree("destroy")) {
		jQuery('#'+locationNavs).jstree("destroy");
	}
	var $root =jQuery('#'+locationNavs).jstree({ 
		'core' : {
			'data' : dataNav,        
			'themes': {
				'name': 'proton',
				'responsive': true,
				'stripes' : false,
			},
		} ,
		"checkbox" : {
			"keep_selected_style" : false
		},
		"multiple": false,
		"plugins" : [  "search" , "state"]
	});

//Expand and Collapse all buttons.
var html = '<p></p><div style="text-align:center;position:absolute;top:5px;right:15px"><button id="'+locationNavs+'expandBtn" class="btn btn-default btn-xs"><i class="far fa-plus-square"></i></button><button id="'+locationNavs+'collapseBtn" class="btn btn-default btn-xs"><i class="far fa-minus-square"></i></button></div>'
$('#expandTree').html(html)
jQuery('#'+locationNavs+'expandBtn').click(function () {
	jQuery('#'+locationNavs).jstree('open_all');
});
jQuery('#'+locationNavs+'collapseBtn').click(function () {
	jQuery('#'+locationNavs).jstree('close_all');
});

//if the tree is short then auto open
jQuery('#'+locationNavs)
    // listen for event
    .on('ready.jstree', function (e, dataTree) {

    	$('#jstreecountAssy').html(dataNav.length)
    	if (dataNav.length < 15 ) {
    		jQuery('#'+locationNavs).jstree('open_all'); 
    	}  
    });

//////////////////////////////////////////////////
////////  EVENT LISTNER ON THE TREE VIEW  ///////
////////////////////////////////////////////////
jQuery('#'+locationNavs)
    // listen for event
    .on('changed.jstree', function (e, dataTree) {
    	var i, j, r = []
    	for(i = 0, j = dataTree.selected.length; i < j; i++) {
    		var ids=(dataTree.instance.get_node(dataTree.selected[0]).id);
			//keep useful code snippet , however no longer required.
			var template=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-template']);
			var field=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-field']);
			r.push(dataTree.instance.get_node(dataTree.selected[i]).template);
		}
		if (field) {
			console.log('THISIS IS S S SLEGAGALGLAGLAGLALGAACCCCYYYYY SSSTTUTUTTGGTTTFFF')
			console.log('THISIS IS S S SLEGAGALGLAGLAGLALGAACCCCYYYYY SSSTTUTUTTGGTTTFFF')
			console.log('THISIS IS S S SLEGAGALGLAGLAGLALGAACCCCYYYYY SSSTTUTUTTGGTTTFFF')
		}else{




    	//console.log(template,'checking')
    	if (template != undefined) {
    		if (ids || ids != undefined) {    	
    			callAssyList(ids,field,template)
    			idTree = ids
    			idComponent = template
    			$('#treeclick').html(ids+' '+' '+template)
    			maxWindow()
    			$('.nav-tabs a[href="#assyCompTabless"]').tab('show')
    		} else{
				//console.log('THis is the JSTREE firing an error here')
			}	
		} else {
    		//console.log('should be firing here')
    		$('#assyCompTable').html('<div class="well"><div style=" padding: 5px"><div style="padding:25px"><h3>Heads up! <small>Click on the nodes of the navigation tree to modify this assembly.</small></h3><div style="text-align: center"><p>To get started view the <a href="/documentation">Documentation section</a> on this site or sign in / sign up.</p></div> </div></div></div>')
    		$('#itemsAssy').html('<div class="well"><div style=" padding: 5px"><div style="padding:25px"><h3>Heads up! <small>Click on the nodes of the navigation tree to modify this assembly.</small></h3><div style="text-align: center"><p>To get started view the <a href="/documentation">Documentation section</a> on this site or sign in / sign up.</p></div> </div></div></div>')
    	}
    	idpageduplicates()
    }
})
}

function maxWindow(){
							//Minimize the window with assembly
							$('#navMenuPanel').css("display","none")
							$('#browserArea').removeClass("col-md-8")
							$('#browserArea').addClass("col-md-12")
							$('#JSONArea').html(JSON.stringify(assemblyQuery[0].items, null, '   '))
						}

						function callAssyList(ids,field,template){
							templateloadingCompTree(template,'false','components',ids)
						}

////////////////////////////
////////    READ  /////////
///////////////////////////
function dataTableLoad (data,id,headings){
	$('#'+id).html('')
	html = ''
	if (items.entry.buttons) {
		html += '<thead><tr><th  style="width:1px"></th>'
	}else{
		html += '<thead><tr>'
	}
	for (var i = 0; i < headings.length; i++) {
		html += '<th>'
		html+=capitalize(headings[i])
		html += '</th>'
	}
	html += '</tr></thead>'
	html += '<tbody>'
//pull in the element id of query 2 for the correct mofiy form
var componentFom = query1[0].elementID
for (var i = 0; i < data.length; i++) {
	if (items.entry.buttons) {
		html += '<tr>'
		html += '<td  style="text-align:center;vertical-align:middle; " id="'+data[i]['elementID']+'" data-parentid="'+data[i]['parentid']+'" data-childType="'+componentFom+'">'
		html += '<div class="input-group spinner"> '
		html += '<input type="text" class="form-control" value="0" /> '
		html += '<div class="input-group-btn-vertical"> '
		html += '<button class="btn btn-default" type="button">'
		html += '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>'
		html += '</button> '
		html += '<button class="btn btn-default" type="button">'
		html += '<span class="glyphicon glyphicon-minus" aria-hidden="true"></span>'
		html += '</button> '
		html += '</div> '
		html += '</div> '
		//html += '<div class="btn-group" role="group" aria-label="...">' 
		//html +='<button type="button" class="btn btn-default btn-xs" title="View item.">'
		//html +='<i class="fa fa-eye" aria-hidden="true"></i></button> '
		//html +='<button type="button" class="btn btn-default btn-xs" title="Edit item."   id="'+create_uid()+'" data-ids="'+data[i]['elementID']+'" data-routing="components"  data-form="'+data[i]['parentid']+'" data-parentid="'+data[i]['parentid']+'" data-routing="database" data-toggle="modal" data-target="#myModal" onclick="editItem(this.id)"        >'
		//html +='<i class="far fa-edit"></i></button>  
		//html +='</div>
		html +='</td>'
	}else{
			html += '<tr>'
		}
		for (var j = 0; j < headings.length; j++) {
			switch(true){
				case(headings[j]=='Url'):
				if (data[i][headings[j]] != undefined) {
					html += '<td style=" vertical-align:middle">'
					html += '<a href="'+data[i][headings[j]]+'" target="_blank">Link</a>'
				} else {
					html += '<td style=" vertical-align:middle">'
					html += "Blank"
				}
				break;
				case(headings[j]=='Image' || headings[j]=='image'):
				if (data[i][headings[j]] != undefined) {
					html += '<td style=" vertical-align:middle">'
					html+='<div class="component-thumb-img">'
					html += '<img style="max-width:150px" src="'+data[i][headings[j]]+'" alt="..." class="img-rounded">'
					html+='</div>'
				} else {
					html += '<td style=" vertical-align:middle">'
					html+='<div class="component-thumb-img">'
					html += '<img style="max-width:150px" src="/img/defaults/default_product.png" alt="..." class="img-rounded">'
					html+='</div>'
				}
				break;
				default:
				if ( data[i][headings[j]] == undefined) {
					html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
					html += "-"
				}else {
					html += '<td style=" vertical-align:middle">'
					html += data[i][headings[j]]
				}
				break;
			}
			html += '</td>'
		}
		html += '</tr>'
	}
	html += '</tbody><p><p><br>'
	$('#'+id).html(html)



} 




/////////////////////////////////////////////////////////////////////
////////    USED FOR THE COMPILATION OF THE DETAILS TABLE  /////////
/////////////////////////////////////////////////////////////////////
function reportDetailList (data,id,qty){
	var  html = ''
	var componentFom = query1[0].elementID
	//console.log(data)
	for (key in data) {
		for (var i = 0; i < data[key].length; i++) {
			if (key == id) {
				if (data[key][i]['description']!='Image' || data[key][i]['description']!='image') {
					html += '<p  '
					{{#if user}}
					html += 'class="selectable" style="cursor: pointer;"'
					{{/if}}
					html +=  ' id="'+create_uid()+'" data-ids="'+key+'" data-form="'+data[key][i]['form']+'" data-parentid="'+data[key][i]['parentid']+'" data-routing="database" data-toggle="modal" data-target="#myModal" onclick="clickEdit(this.id)">'
					html += data[key][i]['value']
					html += '</p>'
				}
			}
		}
	}
	return html
} 

/////////////////////////////////////////////////////////////////////
////////    USED FOR THE COMPILATION OF THE DETAILS TABLE  /////////
/////////////////////////////////////////////////////////////////////
function reportDetailGlossary (data,id,qty){
	var  html = ''
	var componentFom = query1[0].elementID
	//console.log(data)
	for (key in data) {
		if (key == id) {
			html += '<tr>'
			for (var i = 0; i < data[key].length; i++) {

				if (data[key][i]['description']!='Image' || data[key][i]['description']!='image') {
					html += '<td  '
					{{#if user}}
					html += '  style="cursor: pointer;"'
					{{/if}}
					html +=  ' id="'+create_uid()+'" data-ids="'+key+'" data-form="'+data[key][i]['form']+'" data-parentid="'+data[key][i]['parentid']+'" data-routing="database" data-toggle="modal" data-target="#myModal" onclick="clickEdit(this.id)">'
					html += data[key][i]['value']
					html += '</td>'
				}
			}
			html += '</tr>'
		}
	}
	return html
} 




function selectNodes(ids){
	$('html,body').scrollTop(0);
	$('#myModal').modal('hide')
	var ids = $( "#"+ids ).data( "ids");
	$('#assyTree').jstree(true).deselect_all(true)
	$('#assyTree').jstree(true).select_node(ids);
}


////////////////////////////////////////////
////////    REPORT DETAIL TABLE   /////////
//////////////////////////////////////////
function reportDetailTable (data,id,elementID,qty,headings){
//console.log(headings)

	var  html = ''
	var componentFom = query1[0].elementIDs
	switch (true){
		case (qty == 0 ) :
		break;
		case (qty >1) :

		html += '<p>'
		for (key in data) {
			for (var i = 0; i < data[key].length; i++) {
				if (key == id) {
					switch(true){
						case(data[key][i]['description']=='Image' || data[key][i]['description']!='image'):
						html += '<div colspan="4" style="text-align:right; vertical-align:middle">'
						if (data[key][i]['value'] != undefined) {
							html += '<img style="max-width:150px" src="'+data[key][i]['value']+'" alt="..." class="img-rounded">'
						} else {
							html += "Blank"
						}
						html += '</div>'  
						break;
					}
				}
			}
		}

html += '</p>'


		html += '<table class="table table-bordered table-hover table-condensed" id="'+create_uid()+'" data-ids="'+elementID.elementID+'" onclick="selectNodes(this.id)" ><td>Qty Required</td><td><strong>'+qty+'</strong></td><td>off</td></tr></table><br> '
		html += '<table class="table table-bordered table-hover table-condensed">  '
		html += '<thead>'
for (var j = 0; j < headings.length; j++) {
html +='<th>'
html +=headings[j]
html +='</th>'
}	
html +='</tr>'
html += '</thead>'

		html +=  '<tbody id="'+create_uid()+'" data-ids="'+id+'" data-form="'+data[key][0]['form']+'" data-parentid="'+elementID.entry.a_attr+'" data-toggle="modal" data-target="#myModal" data-routing="components" onclick="clickEdit(this.id)">'
		for (key in data) {
			for (var i = 0; i < data[key].length; i++) {
				if (key == id) {
					if (data[key][i]['description']!='Image' || data[key][i]['description']!='image') {
						html += '<tr'
						{{#if user}}
						html += 'style="cursor: pointer;"'
						{{/if}}
						html += '>'
						//Descriptions
						if ($.inArray( 'Description', headings ) >-1) {
						html += '<td style=" vertical-align:middle; ">'
						html += data[key][i]['description']
						html += '</td>'
						}
						//Value
						if ($.inArray( 'Value', headings ) >-1) {
						html += '<td style=" vertical-align:middle;">'		
						switch(true){
						case(data[key][i]['description']=='Url'):
						if (data[key][i]['value'] != undefined) {
						html += '<a href="'+data[key][i]['value']+'" target="_blank">Link</a>'
						} else {
						html += "Blank"
						}
						break;
						default:
						html += data[key][i]['value']
						break;
						}
						html += '</td>' 
						}
						//Units
						if ($.inArray( 'Units', headings ) >-1) {
						if ( data[key][i]['units'] == undefined) {
						html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
						html += "-"
						}else {
						html += '<td style=" vertical-align:middle">'
						html += data[key][i]['units']
						}
						html += '</td>'
						}
						//Detail
						if ($.inArray( 'Detail', headings ) >-1) {
						if ( data[key][i]['detail'] == undefined) {
						html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
						html += "-"
						}else {
						html += '<td style=" vertical-align:middle">'
						html += data[key][i]['detail']
						}
						html += '</td>'
						}
						html += '</tr>'
					}
				}
			}
		}
		html += '</tbody>'
		html += '</table><p><p><br>'
		return html
		break;

		default:

		html += '<p>'
		for (key in data) {
			for (var i = 0; i < data[key].length; i++) {
				if (key == id) {
					switch(true){
						case(data[key][i]['description']=='Image' || data[key][i]['description']=='image'):
						html += '<div colspan="4" style="text-align:right; vertical-align:middle">'
						if (data[key][i]['value'] != undefined) {
							html += '<img style="max-width:150px" src="'+data[key][i]['value']+'" alt="..." class="img-rounded">'
						} else {
							html += "Blank"
						}
						html += '</div>'  
						break;
					}
				}
			}
		}
html += '</p>'




		html += '<table class="table table-bordered table-hover table-condensed">  '
		html += '<thead>'
for (var j = 0; j < headings.length; j++) {
html +='<th>'
html +=headings[j]
html +='</th>'
}	
html +='</tr>'
html += '</thead>'


		html +=  '<tbody id="'+create_uid()+'" data-ids="'+id+'" data-form="'+data[key][0]['form']+'" data-parentid="'+elementID.entry.a_attr+'" data-toggle="modal" data-target="#myModal" data-routing="components" onclick="clickEdit(this.id)">'
		for (key in data) {
			for (var i = 0; i < data[key].length; i++) {
				if (key == id) {
 
					if (data[key][i]['description']!='Image'   ) {
						html += '<tr'
						{{#if user}}
						html += ' style="cursor: pointer;"'
						{{/if}}
						html += '>'
						//Descriptions
						if ($.inArray( 'Description', headings ) >-1) {
						html += '<td style=" vertical-align:middle; ">'
						html += data[key][i]['description']
						html += '</td>'
						}
						//Value
						if ($.inArray( 'Value', headings ) >-1) {
						html += '<td style=" vertical-align:middle;">'		
						switch(true){
						case(data[key][i]['description']=='Url'):
						if (data[key][i]['value'] != undefined) {
						html += '<a href="'+data[key][i]['value']+'" target="_blank">Link</a>'
						} else {
						html += "Blank"
						}
						break;
						default:
						html += data[key][i]['value']
						break;
						}
						html += '</td>' 
						}
						//Units
						if ($.inArray( 'Units', headings ) >-1) {
						if ( data[key][i]['units'] == undefined) {
						html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
						html += "-"
						}else {
						html += '<td style=" vertical-align:middle">'
						html += data[key][i]['units']
						}
						html += '</td>'
						}
						//Detail
						if ($.inArray( 'Detail', headings ) >-1) {
						if ( data[key][i]['detail'] == undefined) {
						html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
						html += "-"
						}else {
						html += '<td style=" vertical-align:middle">'
						html += data[key][i]['detail']
						}
						html += '</td>'
						}
						html += '</tr>'
					}
				}
			}
		}
		html += '</tbody>'
		html += '</table><p><p><br>'
		return html
		break
	}




	
} 

///////////////////////////////////////////////////
////////    ITEM SELECTOR DETAIL TABLE   /////////
/////////////////////////////////////////////////
function itemSelectorDetailTable (data,id,elementID){
	var  html = ''
	var componentFom = query1[0].elementID
	if (id == '5a4490bfccf8e5449cc34ea6') {
		//console.log(data,id,elementID)
	}
	
	html += '<table class="table table-bordered table-hover table-condensed">  '
	html += '<thead>'
	html += '<tr>'
	for (key in data) {
		for (var i = 0; i < data[key].length; i++) {
			if (key == id) {
				switch(true){
					case(data[key][i]['description']=='Image' || data[key][i]['description']=='image'):
					html += '<tr>'
					html += '<td colspan="4" style="text-align:right; vertical-align:middle">'
					if (data[key][i]['value'] != undefined) {
						html += '<img style="max-width:150px" src="'+data[key][i]['value']+'" alt="..." class="img-rounded">'
					} else {
						html += "Blank"
					}
					html += '</td>'  
					html += '</tr>'
					break;
				}
			}
		}
	}
	html += '<th>Description</th><th>Value</th><th>Units</th><th>Detail</th></tr>'
	html += '</thead>'
	html += '<tbody id="'+id+'_itemDetail">'
	for (key in data) {
		for (var i = 0; i < data[key].length; i++) {
			if (key == id) {
				if (data[key][i]['description']!='Image' ||data[key][i]['description']!='image' ) {
					html += '<tr '
					{{#if user}}
					html += ' style="cursor: pointer;"'
					{{/if}}
					html += '  data-form="'+data[key][i]['form']+'"  data-routing="components" onclick="clickEdit(this.id)" >'
					html += '<td style=" vertical-align:middle; ">'
					html += data[key][i]['description']
					html += '</td>'
					html += '<td style=" vertical-align:middle;">'
					switch(true){
						case(data[key][i]['description']=='Url'):
						if (data[key][i]['value'] != undefined) {
							html += '<a href="'+data[key][i]['value']+'" target="_blank">Link</a>'
						} else {
							html += "Blank"
						}
						break;
						default:
						html += data[key][i]['value']
						break;
					}
					html += '</td>'      
					if ( data[key][i]['units'] == undefined) {
						html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
						html += "-"
					}else {
						html += '<td style=" vertical-align:middle">'
						html += data[key][i]['units']
					}
					html += '</td>'
					if ( data[key][i]['detail'] == undefined) {
						html += '<td style=" vertical-align:middle;background-color:#f5f5f5">'
						html += "-"
					}else {
						html += '<td style=" vertical-align:middle">'
						html += data[key][i]['detail']
					}
					html += '</td>'
					html += '</tr>'
				}
			}
		}
	}
	html += '</tbody>'
	html += '</table><p><p><br>'
	return html
} 

//////////////////////////////////////////////
//////  CHECK IF AN OBJECT IS AN ARRAY //////
//////////////////////////////////////////////
function isArray(obj){
	return !!obj && obj.constructor === Array;
}

function loadDataTable(id,modifiedListData,headings,selectedHeadings){
//the use of var here is critical , each instantiate needs to be unique.

var table = jQuery('#'+id).DataTable({
	'destroy':true,
	"pagingType": "numbers",        
	"dom": 'Bfrtip',
	"buttons": [
	{ extend: 'csv', text: ' <i class="far fa-file-excel"></i>' ,className:'btn btn-default btn-xs' ,filename: 'Data export' ,title: 'Table export'}, 
	{ extend: 'pdf', text: ' <i class="far fa-file-pdf"></i>' ,className:'btn btn-default btn-xs' ,filename: 'Data export' ,title: 'Table export'}
	],
	"initComplete":function(settings){

	},
	"drawCallback": function( settings ) {

		$('.spinner .btn:first-of-type').off('click');
		$('.spinner .btn:last-of-type').off('click');
		$('.spinner').children('input').off('click');
		$('.spinner .btn:first-of-type').on('click', function() {

			var input = $(this).parent().parent().children('input');
			input.val(parseInt(input.val(), 10) + 1);
			$('#saveAssembly').removeAttr('disabled'); 
			var rowid =  $(this).parent().parent().parent()
			var parentid = $(rowid).data('parentid')
			var childtype = $(rowid).data('childtype')
	//console.log(rowid,parentid,childtype)
	var spinnerVal = $(this).parent().parent().children('input').val()
	assemblyJSON(spinnerVal,parentid,rowid.attr('id'))
	if (spinnerVal>0) {
		$(this).parent().parent().parent().css("background", "#0366d6")
	} else {
		$(this).parent().parent().parent().css("background", "white")
	}
});
		$('.spinner .btn:last-of-type').on('click', function() {

			var input = $(this).parent().parent().children('input');
			var newvalue = parseInt(input.val(), 10) - 1;
			if (newvalue >= 0) {
				input.val(newvalue);
			}
			$('#saveAssembly').removeAttr('disabled');
			var rowid =  $(this).parent().parent().parent()
			var parentid = $(rowid).data('parentid')
			var childtype = $(rowid).data('childtype')
			var spinnerVal = $(this).parent().parent().children('input').val()
			assemblyJSON(spinnerVal,parentid,rowid.attr('id'))
			if (spinnerVal>0) {
				$(this).parent().parent().parent().css("background", "antiquewhite")
			} else {
				$(this).parent().parent().parent().css("background", "white")
			}
		});
		$('.spinner').children('input').on('keyup',function(){

			var rowid =  $(this).parent().parent()
			var parentid = $(rowid).data('parentid')
			var childtype = $(rowid).data('childtype')
			$('#saveAssembly').removeAttr('disabled');
			var spinnerVal = $(this).val()
			assemblyJSON(spinnerVal,parentid,rowid.attr('id'))
			if (spinnerVal>0) {
				$(this).parent().parent().css("background", "antiquewhite")
			}else {
				$(this).parent().parent().css("background", "white")
			}
		})

		function assemblyJSON(spinnerVal,parentid,rowid){
			if (assemblyQuery[0].items.entry['assembly']) {
				if (assemblyQuery[0].items.entry['assembly'][idTree]) {
					if (assemblyQuery[0].items.entry['assembly'][idTree][rowid]) {
						setVar()
					} else {
						assemblyQuery[0].items.entry['assembly'][idTree][rowid]={}
						setVar()
					}
				} else {
					assemblyQuery[0].items.entry['assembly'][idTree] = {}
					assemblyQuery[0].items.entry['assembly'][idTree][rowid]={}
					setVar()
				}
			} else {
				assemblyQuery[0].items.entry['assembly'] ={}
				assemblyQuery[0].items.entry['assembly'][idTree] = {}
				assemblyQuery[0].items.entry['assembly'][idTree][rowid]={}
				setVar()									
			}

			function setVar(){
				assemblyQuery[0].items.entry['assembly'][idTree][rowid] = {
					'parentid' : parentid,
					'childtype' : parentid,
					'idTree' : idTree,
					'idComponent' : idComponent,
					'qty': spinnerVal
				}
			}
	//console.log('what is the assembly',tempJson)
	$('#JSONArea').html(JSON.stringify(assemblyQuery[0].items, null, '   '))
}





if (assemblyQuery[0].items.entry['assembly']) {
	for(key in assemblyQuery[0].items.entry['assembly']) {
		for(keyItems in assemblyQuery[0].items.entry['assembly'][key]) {
			if (assemblyQuery[0].items.entry['assembly'][key][keyItems]['idTree'] == idTree) {
					//console.log(assemblyQuery[0].items.entry['assembly'][key][keyItems]['qty'])
					//$('#'+key).parent().addClass("selected"); 
					//$('#'+key).children().children().text(assemblyQuery[0].items.entry['assembly'][key][keyItems]['qty'])
					$('#'+keyItems).children().children().val(assemblyQuery[0].items.entry['assembly'][key][keyItems]['qty'])
					if (assemblyQuery[0].items.entry['assembly'][key][keyItems]['qty']>0) {
						if (assemblyQuery[0].items.entry['assembly'][key][keyItems]['qty']>0) {
							$('#'+keyItems).css("background", "antiquewhite")
						}else {
							$('#'+keyItems).css("background", "white")
						}
					}
					//$('#'+key).siblings(':first').attr("data-search", "active"); 				
				}
			}
		}
	}
}
});

var tempJson = {}
//Poulate the item list.
if (assemblyQuery[0].items.entry['assembly']) {
	$('#itemsAssy').html('');
	for(key in assemblyQuery[0].items.entry['assembly']) {
		if (assemblyQuery[0].items.entry['assembly'][key]) {
			for(keyItems in assemblyQuery[0].items.entry['assembly'][key]) {
				if (assemblyQuery[0].items.entry['assembly'][key]) {
					if (assemblyQuery[0].items.entry['assembly'][key][keyItems]) {
						if (assemblyQuery[0].items.entry['assembly'][key][keyItems]['idTree'] == idTree) {
							$('#itemsAssy').append(itemSelectorDetailTable(modifiedListData,keyItems)); 
						}	
					}
				}
			}
		}
	}
}

  //Add event listener for opening and closing details
  jQuery('#'+id +' tbody').on('click', 'td.details-control', function () {
  	var tr = jQuery(this).closest('tr');
  	var row = table.row( tr );
  	if ( row.child.isShown() ) {
            // This row is already open - close it
            row.child.hide();//////////////////////////////////////
            tr.removeClass('shown');
        }
        else {
            // Open this row
            //it is async , and the canvas is not rendered 
            row.child(formatDefault(modifiedListData,this.id))
            row.child.show();
            tr.addClass('shown');
            // Warning Duplicate IDs
            $('[id]').each(function(){
            	var ids = $('[id="'+this.id+'"]');
            	if(ids.length>1 && ids[0]==this){
            		$( this ).css( "color", "red" )
            		$( this ).css( "background", "green" )
            		console.warn('Multiple IDs #'+this.id);
            	}
            });
        }
    });
//Start of advanced filter option.
var html = ''
var counter = 0



function searchColoums(){
	html='<small>Search table columns.</small>'
	html+='<form class="form-horizontal">'
	html+='<fieldset>'
	html+='<div class="row">'
	$( '#'+id+' thead th' ).each(function(){
		if ($( this ).text()=='') {
			counter+=1
		}  else {
			html+='<div class="col-md-4" id="filter_col'+counter+1+'" data-column="'+counter+'" style="padding-bottom:5px">'
			html+='  <input  name="textinput" type="text" placeholder="Search '+$( this ).text()+'" class="form-control AdvancedSearchAssy input-md" id="col'+counter+'_filter">'
			html+='  </div>'
			counter+=1
		}
	})
	html+='</div>'
	html+='</fieldset>'
	html+='</form>'
	$('#AdvancedSearchAssy').html(html)	
}



searchColoums()



function filterColumn ( i ) {
	table.column( i ).search(
		$('#col'+i+'_filter').val()
		).draw();
}

$('input.AdvancedSearchAssy').on( 'keyup click', function () {
	filterColumn( $(this).parents('div').attr('data-column') );
} );

$('.dt-buttons').prepend('<a class="btn btn-default btn-xs" role="button" data-toggle="collapse" href="#collapseExampleAssy" aria-expanded="false" aria-controls="collapseExampleAssy"><i class="fa fa-search" aria-hidden="true"></i></a>')
$('.dt-buttons').prepend('<a class="btn btn-default btn-xs" role="button" data-toggle="collapse" href="#collapseExampleHeadings" aria-expanded="false" aria-controls="collapseExampleHeadings"><i class="fa fa-table" aria-hidden="true"></i></a>')
//end of advanced filter option.

}



////////////////////////////////////////////////////////////////////
////////////        FORMIDsABLE VIEW EXTRA DETAIL       ///////////
///////////////////////////////////////////////////////////////////
function formatDefault ( modifiedListData,d ) {
  // `d` is the original data object for the row
  var html=''
  html += itemSelectorDetailTable  (modifiedListData,d)
  {{#if user}}
  html+='<h4>Options</h4><p>The following options are availble for this item.</p>'
  html +='<div class="row">'

  html +='<div class="col-md-7">'
  html +='<div class="btn-group" role="group" aria-label="...">'
  for (var j = 0; j < items.entry.buttons.length; j++) {
  	switch(true){
  		case (items.entry.buttons[j] == 'modify'):
  		html += '<button type="button" class="btn btn-default" id="'+d+'_read" onclick="modifyItemComp(this.id)"    data-toggle="tooltip" data-placement="top" title="Edit ths item.">Modify</button>'
  		break;
  		case (items.entry.buttons[j] == 'rawitem'):
  		html += '<button type="button" class="btn btn-default" id="'+d+'_raw" onclick="EditWithraw(this.id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">Raw</button>'  
  		break;  
  		case (items.entry.buttons[j] == 'copyitem'):
  		html += '<button type="button" class="btn btn-success" id="'+d+'_copyitem" onclick="copthisitem(this.id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">Copy</button>' 
  		break;  
  		case (items.entry.buttons[j] == 'comp'):
  		html += '<button type="button" class="btn btn-default"  id="'+d+'_comp" onclick="createComp(this.id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Create child item.">Create component</button>'
  		break;  
  		case (items.entry.buttons[j] == 'Modifynorevraw'):
  		html += '<button type="button" class="btn btn-default" id="'+d+'_1" onclick="useForm(this.id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">Modifynorevraw</button>'
  		break;  
  		case (items.entry.buttons[j] == 'norevraw'):
  		html += '<button type="button" class="btn btn-default" id="'+d+'_1" onclick="useForm(this.id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">norevraw</button>'
  		break;  
  	}
  }   
  html +=' </div> <div class="btn-group" role="group" aria-label="...">'
  for (var j = 0; j < items.entry.buttons.length; j++) {
  	switch(true){
  		case (items.entry.buttons[j] == 'delete'):
  		html += '<button type="button" class="btn btn-danger" data-_id="'+d+'" id="'+d+'_del" data-toggle="modal" data-target="#myModal" onclick="deleteEntry(this.id)"  data-toggle="tooltip" data-placement="top" title="Delete this item">Remove</button>'
  		break;
  		case (items.entry.buttons[j] == 'permdelete'):
  		html += '<button type="button" class="btn btn-danger" id="'+d+'_perm" onclick="permdelete(this.id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">Delete</button>'
  		break;  
  	}
  }  
  html +='</div> <div class="col-md-1"></div><div class="btn-group" role="group" aria-label="...">'
  for (var j = 0; j < items.entry.buttons.length; j++) {
  	switch(true){
  		case (items.entry.buttons[j] == 'addcomp'):
  		html += '<button type="button" class="btn btn-primary" id="'+d+'_addcomp" onclick="demo_create(this.id)">Add</button>'
  		break; 
  	}
  } 
  html +='  </div>'
  html +='</div>'
  html +='<div class="col-md-5">'
  html +='<pre> id : '+d+'</pre>'
  html += '<div id="'+d+'_loadingArea" ></div>'
  html +='</div>'
  html +='</div>'
  {{/if}}
  return html;
}





/////////////////////////////////////////////
//////  LOAD ADDITIONAL ITEM DETAIL  ///////
///////////////////////////////////////////
function loadDetail(id){
	var html = '<div style="text-align:center">'
	html += '<i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>'
	html+='<span class="sr-only">Loading...</span>'
	html += '</div>'
	$('#'+id+'_loadingArea').html(html)
}



//////////////////////////////////////////////
////////    BUTTON CLICK OPEN FORM  /////////
////////////////////////////////////////////
function deployFormUse(formToUse){
  //This is hard wired , and likely to cause issues.
  var headings = ["description","detail","icon","headings"]
  var entry =''
  loadformModal(formToUse,'','use',templateload,headings,entry)
}



//////////////////////////
//////  COPY       //////
////////////////////////
function copthisitem(id){
	id = id.replace('_copyitem', '');
	childType = $('#'+id+'').data('childtype')
  //Used for the check self when modifiing.
  if (!childType) {
  	loadformModal(id,id,'self',id)
  } else {
  //INSTRUCTIONS
  ////////////////////////////////////////////////////////////////////
  //Strucuture of the query
  //formdata,idItem,raw,parentid,headings,entry
  //formdata:
  //Which form to use.
  //idItem:
  //Which item to edit.
  //Use the raw function for defining how to edit the data :
  //raw:['use' , 'self' , 'edit' , 'component']
  //parentid:
  //Inject a parent id.
  //Headings
  //used for limiting the information shown on each form
  //Inject a default entry.
  //entry is used to manually add additional information to the form.
  //Find and inject the group menu id number.
  //INSTRUCTIONS
  ////////////////////////////////////////////////////////////////////  
  if (items.elementID) {
  	var parentIdTemp = items.elementID
  } else {
  	var parentIdTemp = items._id
  }
  var headings = ["description","parent"]
  if (true) {}
  	var entry = {
  		elementID : id
  	} 
  //The id of the emement needs to be injected into the form , as it does not have that data.
  loadformModal(childType,id,'componentcopy',parentIdTemp,headings, entry)
}
}





//////////////////////////
//////  USE        //////
////////////////////////
function useForm(id){
	id = id.replace('_use', '');
	loadformModal(id,'','use',id)
}

//////////////////////////
//////  MODIFY     //////
////////////////////////
function modifyItem(id){
	id = id.replace('_read', '');
	childType = $('#'+id+'').data('childtype')
  //Used for the check self when modifiing.
  if (!childType) {
  	loadformModal(id,id,'self',id)
  } else {
  	loadformModal(childType,id,'self',id)
  }
}



////////////////////////////////////
//////  CREATE COMPONENT     //////
//////////////////////////////////
function createComp(id){
	id = id.replace('_comp', '');
	childType = $('#'+id+'').data('childtype')
  //there is some kind of wierd lowcase requiremtns.
  parentid = $('#'+id+'').data('parentid')
  if (!childType) {
  	loadformModal(childType,'','use',id)
  } else {
  	loadformModal(parentid,'','use',id)
  }
}

function exportWord (){
	/////////////////////////////////////
//////  EXPORT TO MS WORD     //////
///////////////////////////////////
 /* HTML to Microsoft Word Export Demo 
  * This code demonstrates how to export an html element to Microsoft Word
  * with CSS styles to set page orientation and paper size.
  * Tested with Word 2010, 2013 and FireFox, Chrome, Opera, IE10-11
  * Fails in legacy browsers (IE<10) that lack window.Blob object
  */
  window.export.onclick = function() {
  	if (!window.Blob) {
  		alert('Your legacy browser does not support this action.');
  		return;
  	}
  	var html, link, blob, url, css;
   // EU A4 use: size: 841.95pt 595.35pt;
   // US Letter use: size:11.0in 8.5in;
   css = (
   	'<style>' +
   	'@page report{size: 841.95pt 595.35pt;mso-page-orientation: portrait;}' +
   	'div.report {page: report;font-family:Calibri (Body);}' +
   	'body {font-family:Calibri (Body);}' +
   	'h1,h2,h3,h4,h5 {font-family:Calibri (Body);}' +
   	'li {font-family:Calibri (Body);}' +
   	'ol {font-family:Calibri (Body);}' +
   	'a {font-family:Calibri (Body);}' +
   	'ul {font-family:Calibri (Body);}' +
   	'p {font-family:Calibri (Body);}' +
   	'table{width: 100%;border-collapse:collapse;}td{border:1px gray solid;width:5em;}th{border:1px gray solid;width:5em;}'+
   	'</style>'
   	);
   html = $('#report').html()
   blob = new Blob(['\ufeff', css + html], {
   	type: 'application/msword'
   });
   url = URL.createObjectURL(blob);
   link = document.createElement('A');
   link.href = url;
   // Set default file name. 
   // Word will append file extension - do not add an extension here.
   link.download = 'Document';   
   document.body.appendChild(link);
   if (navigator.msSaveOrOpenBlob ) navigator.msSaveOrOpenBlob( blob, 'Document.doc'); // IE10-11
   		else link.click();  // other browsers
   		document.body.removeChild(link);
   	};

}


   </script>