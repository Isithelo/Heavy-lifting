<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{title}}</title>
  {{> css}}
</head>
<body>
  {{> header}}
  {{> javascript}}
  <div class="container">

 

    <h1>{{title}}</h1>
    <p>Admin panel area.</p>
    <div>
      <!-- Nav tabs -->
      <ul class="nav nav-tabs" role="tablist">
        <li role="presentation"><a href="#create" aria-controls="create" role="tab" data-toggle="tab">Primer</a></li>
        <li role="presentation"  class="active"><a href="#read" aria-controls="read" role="tab" data-toggle="tab">Form List</a></li>
   
      </ul>
      <!-- Tab panes -->
      <div class="tab-content">
        <div role="tabpanel" class="tab-pane " id="create">
          <p></p>
                            <p>Modify the schema and options to create initial database forms. Refer to <a href="http://www.alpacajs.org/" target="_blank">Alpaca.js</a> for details on the schema and options layout. This tab creates the 2 primary forms used for all database use.</p>
                            
          <div class="row">
            <div class="col-md-12">
              <!-- Textarea -->
 <h1>Step 1 - Create the Database Primer</h1>
              <p>Edit the text areas below to customise the first primer form. Use the update for button to view the primer form.</p>
              <div class="row">

             
                <div class="col-md-6">
                  <h3>Schema</h3>
                  <textarea class="form-control " id="schema" name="schema"  style="height: 250px">
{
   "title": "Form Deployment",
   "description": "Insert Schema and Options to design your form.",
   "type": "object",
   "properties": {
      "schema": {
         "title": "Schema"
      },
      "options": {
         "title": "Options"
      }
   }
}               </textarea>
                </div>
                <div class="col-md-6">
                  <h3>Options</h3>
                  <textarea class="form-control" id="options" name="options"  style="height: 250px">
{
   "form": {
      "buttons": {
         "submit": {
            "title": "Submit",
            "id": "submit",
            "click": ""
         }
      }
   },
   "helper": "Insert Schema and Options to design your form.",
   "fields": {
      "schema": {
         "type": "json",
         "rows": 10,
         "cols": 40,
         "helper": "Schema Set.",
         "validate": false
      },
      "options": {
         "type": "json",
         "rows": 10,
         "cols": 40,
         "helper": "Schema Set.",
         "validate": false
      }
   },
   "focus": ""
}
                  </textarea>
                </div>
              </div>
              <p></p>
              <div class="btn-group" role="group" aria-label="...">
                <button type="button" class="btn btn-default" id="updateForm">Update Form</button>
              </div>
            </div>
              <div class="col-md-12">
               <h1>Step 2 - Push the form to the database.</h1>
              <p>Use the client side primer form to create the server side database entry.</p>
              <div id='msgArea'></div>
              <div class="well col-md-6"  >
                   <div id="form1"></div>

              </div>
            </div>


 


<div class="row">

              <h1>Step 3 - Push the raw entry edit form.</h1>
              <p>Use the client side primer ( above ) to insert the raw edit form ( text areas below) to create the server side raw entry form.</p>

  <div class="col-md-6">
                  <h3>Schema</h3>
                  <textarea class="form-control " id="schema" name="schema"  style="height: 250px">
{
   "title": "Form Deployment",
   "description": "Insert Schema and Options to design your form.",
   "type": "object",
   "properties": {
      "name": {
         "title": "name"
      },
      "detail": {
         "title": "detail"
      },
      "objectType": {
         "title": "objectType",
         "enum": [
            "form",
            "data",
            "other"
         ]
      },
      "entry": {
         "title": "entry"
      },
      "parentid": {
         "title": "parentid"
      },
      "elementID": {
         "title": "elementID"
      },
      "userID": {
         "title": "userID"
      },
      "revision": {
         "title": "revision",
         "enum": [
            "created",
            "updated",
            "deleted"
         ]
      },
      "active": {
         "title": "active",
         "enum": [
            "true",
            "false"
         ]
      }
   }
}              </textarea>
                </div>
                <div class="col-md-6">
                  <h3>Options</h3>
                  <textarea class="form-control" id="options" name="options"  style="height: 250px">
{
   "form": {
      "buttons": {
         "submit": {
            "title": "Submit",
            "id": "submit",
            "click": ""
         }
      }
   },
   "helper": "Insert Schema and Options to design your form.",
   "fields": {
      "detail": {
         "type": "text",
         "rows": 10,
         "cols": 40,
         "helper": "All entry data is stored here.",
         "validate": true
      },
      "objectType": {
         "type": "select"
      },
      "revision": {
         "type": "select"
      },
      "active": {
         "type": "select",
         "required":false
      },
      "entry": {
         "type": "json",
         "rows": 10,
         "cols": 40,
         "helper": "All entry data is stored here.",
         "validate": false
      }
   },
   "focus": ""
}
                  </textarea>
                </div>
            
</div>

<div class="row">

              <h1>Step 4 - Push the database.</h1>
              <p>Create the default database editing form.</p>

  <div class="col-md-6">
                  <h3>Schema</h3>
                  <textarea class="form-control " id="schema" name="schema"  style="height: 250px">
{
   "title": "Database Form",
   "description": "Insert Schema and Options to design your form.",
   "type": "object",
   "properties": {
      "description": {
         "title": "Description"
      },
      "value": {
         "title": "Value"
      },
      "unit": {
         "title": "Unit"
      },
      "detail": {
         "title": "Detail"
      },
      "standard": {
         "title": "Standard"
      },
      "parent": {
         "title": "Parent"
      },
      "icon": {
         "title": "Icon"
      },
      "template": {
         "title": "Template"
      }
   }
}               
               
                   
               
   </textarea>
                </div>
                <div class="col-md-6">
                  <h3>Options</h3>
                  <textarea class="form-control" id="options" name="options"  style="height: 250px">
{
   "form": {
      "buttons": {
         "submit": {
            "title": "Submit",
            "id": "submit",
            "click": ""
         }
      }
   },
   "helper": "Insert Schema and Options to design your form.",
   "fields": {
      "detail": {
         "type": "text",
         "rows": 4,
         "cols": 40,
         "helper": "All entry data is stored here.",
         "validate": true
      },
      "objectType": {
         "type": "select"
      },
      "revision": {
         "type": "select"
      },
      "active": {
         "type": "select",
         "required":false
      },
      "entry": {
         "type": "json",
         "rows": 4,
         "cols": 40,
         "helper": "All entry data is stored here.",
         "validate": false
      }
   },
   "focus": ""
}
                  </textarea>
                </div>
            
</div>



          </div>
        </div>
        <div role="tabpanel " class="tab-pane active" id="read">
          {{> tableload objectType="form"}}
        </div>
 
        <div role="tabpanel" class="tab-pane" id="delete">...</div>
      </div>
    </div>
  </div>

<p>This page will be a single button , Initialize database. But will have a step by step creation process which can be loaded to show how this works.</p>

  <script type="text/javascript">
var data = {{{data}}}

////////////////////////////////////
////        INITIALIZE         //// 
//////////////////////////////////
$(document).ready(function(){
   var form = {
    schema : JSON.parse($('#schema').val()) ,
    options : JSON.parse($('#options').val())
  }
  formInit(form.schema,form.options)
});

////////////////////////////////////////////
////        UPDATE FORM BUTTON         //// 
//////////////////////////////////////////
$('#updateForm').click(function(){
  var form = {
    schema : JSON.parse($('#schema').val()) ,
    options : JSON.parse($('#options').val())
  }
  //Test alpaca form for true , i.e if it exists , then destroy it.
  control = $("#form1").alpaca("destroy");
  if (control) {
    formInit(form.schema,form.options)
  } else { 
    formInit(form.schema,form.options)
  }
 })

//////////////////////////////////////
////        CREATE FORM          //// 
////////////////////////////////////
function formInit(schema,options){
  //work areound for the special requirments on the submit button.
  options.form.buttons.submit.click = function(e){
    e.preventDefault()
    var value = this.getValue();
    clickSubmit(value)
  }
  $("#form1").alpaca({
    "schema": schema,
    "options": options,

  });
}

//////////////////////////////////////////////
////        SUBMIT BUTTON CLICK          //// 
////////////////////////////////////////////
function clickSubmit(dataset){
  var str = JSON.stringify(primer, null, 2);
  $('#jsonArea').html(str)
  var primer = {
    'name' :'',
    'detail' :'',
    'entry': dataset,
    'parentid' :'',
    'elementID' :'', 
    'userID' :'',
    'objectType':'form',
    'revision' :'created',//
    'active' : "true",//
  }

 jQuery.ajax({
    'url': '/create',
    'type': 'POST', 
    'dataType': 'json',
    'contentType': 'application/json', 
    'data': JSON.stringify(primer),
    'success': function (dataSchemaObject) {
      $('#msgArea').html('<div class="alert alert-success" role="alert">Saved</div>')
    }
  }); 
}

</script>


{{> analytics}}



</body>
</html>
