  <div class="container" style="padding-top: 45px">
    <div class="row">
      <div class="col-md-4" id="navMenuPanel">
        <div class="panel panel-default">
          <div class="panel-body">
           <h5><strong>Navigation</strong> <small>Use the navigation tree to interact with the database.</small></h5>
           <div class="panel">
             <div style="padding-bottom:15px;padding-bottom:15px">
              <input id="search_field" name="searchinput" type="search" placeholder="Search Navigation" class="form-control input-md">      
            </div>
            <div id="jstree"></div> 



          </div>
          <div class="btn-group" role="group" aria-label="..." style="padding-bottom: 15px">
            <button type="button" class="btn btn-default" id="newMenuItem" data-toggle="modal" data-target="#myModal"><i class="fa fa-plus" aria-hidden="true"></i></button> 
          </div>
        </div>
      </div>
    </div>  

    
    <div class="col-md-8" id="browserArea">
      <div class="panel panel-default">
        <div class="panel-body">
          <div id="panel">  

            What are we trying to acheive here ?

            We need to start setting up the requiremnts for the drop down lists on all of the forms. 

            This can only be done if the lists can be created and modified.

            As such there is a requirement for a navaigation system , as well as the actual data items.

            The data items will use the menuitem field to hold there linked menu items. This works.

            The menu items will use the menu item are ideally as well , rather than the data type , although changing this is not to difficult.

            First port of call is a complete list of database items. This can then have a series of filters for each type of item that is requested through the navaigation strucutre.

            So it will be object type : database menu 

            Use the database menu id aquired to return to the server the id to find . 

            Then return the menu item selected as well as the list of items with that menu item in the " menu item " field.

          </div>
        </div>
      </div>
      <div class="alert alert-info" role="alert"> <strong><i class="fa fa-arrow-left" aria-hidden="true"></i>  Heads up!</strong> Click on the nodes of the navigation tree to interact with the site.</div>
    </div>
  </div>
</div>


<script type="text/javascript">
var databaseid = {{{databaseId}}};
var databaseMenu = []
var temp =[]
var table 


 

/////////////////////////////////// 
//////  GET JSTREE BY ID    //////
///////////////////////////////// 
function jstreeGet(ids){
  jQuery.ajax({
    'url': '/jstree?ids='+ids,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
      var dataSchemaObject = JSON.parse(dataSchemaObject)
      var dataSchemaObject = fitstFormat(dataSchemaObject)
    //manipulate data to work with the jstree
      var jsTreeData = dataJStreeConvert (dataSchemaObject)
      var location = 'jstree'
      //load the jstree
      loadNavMenu('jstree',jsTreeData)
    }
  });
}

 


function fitstFormat(databaseMenu){
    //This is where the id is injected into the menu item . Crude hacky work around , not sure how to improve.
  for (var i = 0; i < databaseMenu.length; i++) {
      //the add the id to the array going into the menu .
      if (databaseMenu[i]['elementID'] == "") {
        databaseMenu[i].entry.id = databaseMenu[i]['_id']
      }else{
        databaseMenu[i].entry.id = databaseMenu[i]['elementID']
      }
      temp.push(databaseMenu[i].entry)
    }
    databaseMenu = temp
    return databaseMenu
}




///////////////////////////// 
//////  INITIALISE    //////
/////////////////////////// 
$( document ).ready(function() {
  jstreeGet(databaseid)
});

//change to format JS tree requires
function dataJStreeConvert (databaseMenu){
  var newData = []
  for (var i = 0; i < databaseMenu.length; i++) {
    var temp = {}
    for (key in databaseMenu[i]){
      switch (true){
        case (key == 'id'):
        temp['id'] =  databaseMenu[i][key]
        if (databaseMenu[i][key]=='5848fc75b622bb53eca6ffd7') {
          state = {
              "opened" : true,  // is the node open
            }
            temp['state'] = state
          }
          break;
          case (key == 'parent'):
          temp['parent'] = databaseMenu[i][key]
          break;
          case (key == 'description'):
          temp['text'] = databaseMenu[i][key]
          break;
          case (key == 'icon'):
          temp['icon'] = databaseMenu[i][key]
          break;
          case (key == 'template'):
          aclass = { 
            "data-template" : databaseMenu[i][key],
          }
          temp['a_attr'] =  aclass
          break;
        }
      }
      newData.push(temp)
    }


//error trap the menu.
for (var i = 0; i < newData.length; i++) {
 
  if (!newData[i].parent) {
    newData[i].parent = '#'
  }

}

return newData
}

////////////////////////////////////////////////
////////    LOAD NAV TREE INTO MEMORY   ///////
//////////////////////////////////////////////
function loadNavMenu(location,dataNav){
  //console.log(dataNav)
  var $root =jQuery('#'+location).jstree({ 
    'core' : {
      'data' : dataNav,        
      'themes': {
        'name': 'proton',
        'responsive': true,
        'stripes' : false,
      },
    } ,
    "checkbox" : {
      "keep_selected_style" : false
    },
    "multiple": false,
    "plugins" : [ "wholerow" , "search" , "state"]
  });

/////////////////////////////////
////////  SEARCH NAV MENU ///////
/////////////////////////////////
var to = false;
jQuery('#search_field').keyup(function () {
  if(to) { clearTimeout(to); }
  to = setTimeout(function () {
    var v = jQuery('#search_field').val();
    jQuery('#'+location).jstree(true).search(v);
  }, 250);
});

//////////////////////////////////////////////////
////////  EVENT LISTNER ON THE TREE VIEW  ///////
////////////////////////////////////////////////
jQuery('#'+location)
    // listen for event
    .on('changed.jstree', function (e, dataTree) {
      var i, j, r = []
      for(i = 0, j = dataTree.selected.length; i < j; i++) {
        var ids=(dataTree.instance.get_node(dataTree.selected[0]).id);
        //keep useful code snippet , however no longer required.
        var template=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-template']);
        r.push(dataTree.instance.get_node(dataTree.selected[i]).template);
      }
      templateloading(ids)
    })
  }

///////////////////////////////////////////////////////
////////  EVENT LISTNER FUNCTION AREA DATABASE ///////
/////////////////////////////////////////////////////
function templateloading(ids){
//Ensure that the first load error is covered , also any other errors.
if(ids){
  jQuery.ajax({
   'async': true,
   'global': false,
   'url': '/templateload?ids='+ids,
   'success': function (dataSchemaObject) {
     jQuery('#panel').html("")
     jQuery('#panel').html(dataSchemaObject)
   }
 });
}
}

//////////////////////////////////////////////
////////    BUTTON CLICK OPEN FORM  /////////
////////////////////////////////////////////
$('#newMenuItem').click(function(){
  //This is hard wired , and likely to cause issues.
  newMenuItems('5890328e1cb2584e38099333','','use')
})

//////////////////////////////////////
////////    GET FORM BY ID  /////////
////////////////////////////////////
function newMenuItems(formdata,idItem,raw){
  jQuery.ajax({
    'url': '/getform?formdata='+formdata+'&idItem='+idItem+'&raw='+raw,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
      $('#formArea').html(dataSchemaObject)
    }
  });
}

</script> 
