

<div role="tabpanel" class="tab-pane active" id="table">
 <p></p>
</div> 

<script type="text/javascript">



//The menu item from JSTREE
var query = {{{query}}}
//The applicable form for use ( query.childtype)
var query1 = {{{query1}}}
//The form in queston
var query2 = {{{query2}}}
//the form elements.
var query3 = {{{query3}}}
//the form datasets.
var query4= {{{query4}}}
//The query.parentid items.
var tablelistdata = {{{query3}}};
var $root


function demo_delete() {
  var ref = $('#jstreeArea').jstree(true),
  sel = ref.get_selected();
  if(!sel.length) { return false; }
  ref.delete_node(sel);
};




 


function demo_create(ids) {
 
   ids = ids.replace('_addcomp', ''); 
  var ref = $('#jstreeArea').jstree(true),
  sel = ref.get_selected();
  console.log(sel)
  if(!sel.length) { return false; }
  sel = sel[0];

     sel =    ref.create_node(
          sel, 
          { 
            "a_attr": {
               
               'data-item': ids 
               
              },
          "type":"file" ,
          "text": query1[0].name
        });

 


 
};

/////////////////////////
//////  DELETE   ///////
///////////////////////
function addcomp(id){
  id = id.replace('_addcomp', '');  
  $('#storage').append('"'+id+'",')
}


////////////////////////////////////
//////  SAVE THE ASSEMBLY    //////
//////////////////////////////////
function saveelement(){
var str = $('#jstreeArea').jstree(true).get_json('#', {flat:true})
var temp = []
for (var i = 0; i < str.length; i++) {
 
  if(str[i]['a_attr']['data-item']){
    temp.push(str[i]['a_attr']['data-item'])
  }
}
//$("#datasavetemp").html(JSON.stringify(temp, null, 2))
assembly.entry['5909f990c93ba53e2cb8aac7']=temp
primer = assembly 
//Jquery send to server
jQuery.ajax({
  'url': '/create',
  'type': 'POST', 
  'dataType': 'json',
  'contentType': 'application/json', 
  'data': JSON.stringify(primer),
  'success': function (dataSchemaObject) {
    window.location.reload()
  },
});   

}



//////////////////////////////////////////
//////  CAPATILIZE FIRST LETTER    //////
////////////////////////////////////////
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}
/////////////////////////////
////     DEBUG AREA     //// 
///////////////////////////
console.log( 'tableComponent loading' )
console.log( '-------------------------' )
console.log( 'query : ',query )
console.log( 'query1 : ',query1 )
console.log( 'query2 : ',query2 )
console.log( 'query3 : ',query3 )
console.log( 'query4 : ',query4 )
console.log( 'tablelistdata : ',tablelistdata )

console.log( '-------------------------' )
console.log( 'tableComponent loading' )


var modifiedTableListData
var modifiedListData



tablelistdata.sort(function(a, b) {
 if (a.entry.order && b.entry.order) {
  return parseFloat(a.entry.order) - parseFloat(b.entry.order);
}
});
query3.sort(function(a, b) {

  if (a.entry.order && b.entry.order) {
    return parseFloat(a.entry.order) - parseFloat(b.entry.order);
  }

  
});
query2.sort(function(a, b) {
  return parseFloat(a.entry.order) - parseFloat(b.entry.order);
});

////////////////////////////////////
////        INITIALIZE         //// 
//////////////////////////////////
$('document').ready(function(){
  dataFormatComp()
  
  var temp = dataJStreeConvert (modifiedListData)
  loadNavMenu('jstreeArea', temp)
})


////////////////////////////////////////////////////////
////        INSERT THE ATTACHED ASSMEBLIES         //// 
//////////////////////////////////////////////////////
function injectAssemblyelements(dataNav){
  if (assembly.entry['5909f990c93ba53e2cb8aac7']) {
    var html='<strong >Assembly Name : </strong>'
  $('#assyname').html(html + assembly.entry["59003382586b5442146f37d1"])

  for (var i = 0; i < assembly.entry['5909f990c93ba53e2cb8aac7'].length; i++) {
    var ids = assembly.entry['5909f990c93ba53e2cb8aac7'][i]
    //Ensure that the first load error is covered , also any other errors.
      if(ids){
        jQuery.ajax({
          'async': true,
          'global': false,
          'url': '/singleidcall?ids='+ids,
          'success': function (dataSchemaObject) {
            //console.log('///////////////////////////')
            //console.log(dataSchemaObject)
            //console.log('///////////////////////////')
            //reformat the data.





            dataFormatCompforassy(dataSchemaObject,ids,dataNav)
          }
        });
      }
    }
} else {
  $('#browserArea').html('This assembly is empty')
}
}

//  *****    ****  **********  ***********  ***********  
//  ****** ******  **********  ***********  ***********
//  *************  ****              *****        *****
//  *************  **********     *******      *******
//  **** *** ****  ****         ****          ****
//  ****     ****  **********  ***********  ***********
//  ****     ****  **********  ***********  ***********


///////////////////////////////////////////////////
////        REQUIRED FORMATING OF DATA        //// 
/////////////////////////////////////////////////
function dataFormatCompforassy(dataset,elementid,dataNav){
  var tempVar = []
  var tempVar1 = []
  var tempVar2 = []
  tempVar1 = []
  for(key in dataset.query.entry){
    for (var j = 0; j < dataset.query2.length; j++) {
      if (dataset.query2[j].elementID == key) {
        tempVar = {
          'description' : dataset.query2[j]['entry']['description'],
          'value' : dataset.query.entry[dataset.query2[j].elementID],
          'units' : dataset.query2[j]['entry']['units'],
          'detail' : dataset.query2[j]['entry']['detail'],
          'id' : dataset.query2[j]['elementID'] ,
          'parent' : dataset.query1['elementID'] ,
          'childType': dataset.query1['childType'] 
        }
      }
    }
    tempVar1.push(tempVar) 
  }
  tempVar2[dataset.query.elementID] = tempVar1
  var ref = jQuery('#jstreeArea').jstree(true)
  for (key in tempVar2){
    for (var j = 0; j < dataNav.length; j++) {
        if(dataNav[j]['a_attr']['data-parent'] == tempVar2[key][0].parent){
        //the key of var tempvar 2 is to be matched to the category variable.
        var tempitems = JSON.parse(JSON.stringify(key))
         ref.create_node(
          "#"+dataNav[j]['id'], 
          { 
            "a_attr": {
               'data-form': tempVar2[key][0].childType ,
               'data-item': tempitems ,
               'data-parent': dataNav[j]['a_attr']['data-parent'] 
              },
          "type":"file" ,
          "text":tempVar2[key][0].value
        });
    }
  }
}
}


//  *****    ****  **********  ***********  ***********  
//  ****** ******  **********  ***********  ***********
//  *************  ****              *****        *****
//  *************  **********     *******      *******
//  **** *** ****  ****         ****          ****
//  ****     ****  **********  ***********  ***********
//  ****     ****  **********  ***********  ***********



 //////////////////////////////////////////
////        CREATE UNIQUE ID         //// 
////////////////////////////////////////
function create_uid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
    .toString(16)
    .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
  s4() + '-' + s4() + s4() + s4();
}

///////////////////////////////////////////////////
////        REQUIRED FORMATING OF DATA        //// 
/////////////////////////////////////////////////
function dataFormatComp(){
  var tempVar = []
  var tempVar1 = []
  var tempVar2 = []
  for (var i = 0; i < tablelistdata.length; i++) {
    tempVar1 = []
    for(key in tablelistdata[i].entry){
      for (var j = 0; j < query2.length; j++) {
        if (query2[j].elementID == key) {
          tempVar = {
            'description' : query2[j]['entry']['description'],
            'value' : tablelistdata[i].entry[query2[j].elementID],
            'units' : query2[j]['entry']['units'],
            'detail' : query2[j]['entry']['detail'],
            'id' : query2[j]['elementID'] ,
            'childType': query2[j]['childType'] 
          }
        }
      }
      tempVar1.push(tempVar) 
    }
    tempVar2[tablelistdata[i].elementID] = tempVar1
  }
  var temp = []
  var temp
  //This is where the id is injected into the menu item . Crude hacky work around , not sure how to improve.
  for (var i = 0; i < tablelistdata.length; i++) {
    for(key in tablelistdata[i].entry){
      for (var j = 0; j < query2.length; j++) {
        if (query2[j].elementID == key) {
          tablelistdata[i].entry[query2[j]['entry']['description']] = tablelistdata[i].entry[query2[j].elementID]
          delete tablelistdata[i].entry[query2[j].elementID]
        }
      }
    }
      //the add the id to the array going into the menu .
      if (tablelistdata[i]['elementID'] == "") {
        tablelistdata[i].entry._id = tablelistdata[i]['_id']
      }else{
        tablelistdata[i].entry._id = tablelistdata[i]['elementID']
      }
      tablelistdata[i].entry.name = tablelistdata[i]['name']
      tablelistdata[i].entry.childType = tablelistdata[i]['childType']
      tablelistdata[i].entry.name = tablelistdata[i]['name']
   // tablelistdata[i].entry.detail1 = tablelistdata[i]['detail']
   tablelistdata[i].entry.userID = tablelistdata[i]['userID']
   tablelistdata[i].entry.parentid = tablelistdata[i]['parentid']
   temp.push(tablelistdata[i].entry)
 }
 modifiedListData = tempVar2
 modifiedTableListData = temp
}

//////////////////////////////////////////////
//////  CHECK IF AN OBJECT IS AN ARRAY //////
//////////////////////////////////////////////
function isArray(obj){
  return !!obj && obj.constructor === Array;
}

/////////////////////////////////////////
//////  DATACONVERT FOR JSTREE    //////
/////////////////////////////////////// 
function dataJStreeConvert (databaseMenu){
  var newData = []
  for (key in databaseMenu){
    var tempVar = {}
    for (var i = 0; i < databaseMenu[key].length; i++) {
      if(databaseMenu[key][i]['description'] == 'a_attr'){
        aclass = { 
          "data-parent" : databaseMenu[key][i]['value'],
        }
        tempVar['a_attr'] =  aclass
      }else {
        tempVar[databaseMenu[key][i]['description']] = databaseMenu[key][i]['value']
      }
    }
    tempVar['id'] = key
    tempVar['form'] = key
    newData.push(tempVar)
  }
//error trap the menu.
for (var i = 0; i < newData.length; i++) {
  if (!newData[i].parent) {
    newData[i].parent = '#'
  }
}
sortResults(newData,'text', true);
return newData
}

////////////////////////////////////////////////
////////    LOAD NAV TREE INTO MEMORY   ///////
//////////////////////////////////////////////
function loadNavMenu(location,dataNav){
 
//console.log(dataNav)
//Destory the tree if it exists
if (jQuery('#'+location).jstree("destroy")) {
  jQuery('#'+location).jstree("destroy");
}

jQuery('#'+location).jstree({
  "core" : {
    "animation" : 0,
    "check_callback" : true,
    'themes': {
      'name': 'proton',
      'responsive': true,
      'stripes' : false,
    },
    'data' : dataNav ,
  },
  "types" : {
    "#" : { "max_children" : 50, "max_depth" : 50, "valid_children" : ["root"] },
    "root" : { "icon" : "./assets/images/tree_icon.png", "valid_children" : ["default"] },
    "default" : { "valid_children" : ["default","file"] },
    "file" : { "icon" : "glyphicon glyphicon-file", "valid_children" : [] }
  },
  "plugins" : [   "dnd", "search", "state", "types", "wholerow"  ]
});

jQuery('#'+location)
.bind('ready.jstree', function(e, data) {
  $('#assembliespanel').css("display","block")
var html = ''
html+='<p></p>'
html+='<div class="btn-group" role="group" aria-label="...">'
html+='<a class="btn btn-success" id="inject" role="button" data-toggle="collapse" aria-expanded="false" aria-controls="naming" onclick="saveelement()"><i class="fa fa-floppy-o" aria-hidden="true"></i> Save</a>'
 
html+='<button type="button" class="btn btn-default" onclick="demo_delete();"><i class="glyphicon glyphicon-remove"></i> Remove Node</button>'
html+='</div>'
 
$('#treebutton').html(html)
  injectAssemblyelements(dataNav)
})



/////////////////////////////////
////////  SEARCH NAV MENU ///////
/////////////////////////////////
var to = false;
jQuery('#search_field').keyup(function () {
  if(to) { clearTimeout(to); }
  to = setTimeout(function () {
    var v = jQuery('#search_field').val();
    jQuery('#'+location).jstree(true).search(v);
  }, 250);
});

//////////////////////////////////////////////////
////////  EVENT LISTNER ON THE TREE VIEW  ///////
////////////////////////////////////////////////
jQuery('#'+location)
// listen for event
.on('changed.jstree', function (e, dataTree) {
  var i, j, r = []
  for(i = 0, j = dataTree.selected.length; i < j; i++) {
      var ids=(dataTree.instance.get_node(dataTree.selected[0]).id);
      //keep useful code snippet , however no longer required.
      var template=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-template']);
      var parent=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-parent']);
      var form=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-form']);
      var item=(dataTree.instance.get_node(dataTree.selected[0]).a_attr['data-item']);
      r.push(dataTree.instance.get_node(dataTree.selected[i]).template);
}
if (!(parent && form)) {
  if (parent) {
    templateCompLoad(parent)
  }
} 
if (parent && form) {
  modifyTreeItem(form,parent,item)
} 
})
//////////////////////////////////////////////
////////    BUTTON CLICK OPEN FORM  /////////
////////////////////////////////////////////
$('#newMenuItem').click(function(){
//var temp = jQuery('#'+location).jstree("get_selected",true)
//console.log(temp[0].id)
newMenuItems(Formids,'','use',databaseid,'',navmenuHeadings)
})
}

//////////////////////////
//////  MODIFY     //////
////////////////////////
function modifyTreeItem(form,parent,item){
 console.log(form,parent,item)

 
  
     var entry = {
      elementID : item
    } 
 var headings = ["description","parent"]
 
treeloadform(form,item,'componentedit',parent,headings, entry)
}

//////////////////////////////////////
////////    GET FORM BY ID  /////////
////////////////////////////////////                                                                                                              
function treeloadform(formdata,idItem,raw,parentid,headings,entry){
  var headings = JSON.stringify(headings)
  var entry = JSON.stringify(entry)
  console.log('entr')
  jQuery.ajax({
    'url': '/getform?formdata='+formdata+'&idItem='+idItem+'&raw='+raw+'&parentid='+parentid+'&headings='+headings+'&entry='+entry,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
      console.log(dataSchemaObject)
      $('#browserArea').html(dataSchemaObject)
    }
  });
}

///////////////////////////////////////////////////////
////////  EVENT LISTNER FUNCTION AREA DATABASE ///////
/////////////////////////////////////////////////////
function templateCompLoad(ids){
 
//Ensure that the first load error is covered , also any other errors.
if(ids){
  jQuery.ajax({
   'async': true,
   'global': false,
   'url': '/templateload?ids='+ids,
   'success': function (dataSchemaObject) {
     jQuery('#browserArea').html("")
     jQuery('#browserArea').html(dataSchemaObject)
   }
 });
}
}
</script>