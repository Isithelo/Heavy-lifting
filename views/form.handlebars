
<div id="formDelivery"></div>

<script type="text/javascript">
  var formdata = {{{formdata}}}
  var idItem = {{{idItem}}}
  var raw = {{{raw}}}
  var parentid = {{{parentid}}}
  var formid1 = create_uid()
  var parentItem = {{{parentItem}}}
  

  {{#if headings}}
  var headingsTemp = {{{headings}}}
  {{else}}
  var headingsTemp = ''
  {{/if}}

////////////////////////////////////
////        DEBUG AREA         //// 
//////////////////////////////////
console.log( 'form loading' )
console.log( '-------------------------' )
console.log( 'formdata :',formdata )
console.log( 'idItem :',idItem )
console.log( 'raw :',raw )
console.log( 'parentid :',parentid )
console.log( 'formid1 :',formid1 )
console.log( 'parentItem :',parentItem )
console.log( 'headingsTemp :',headingsTemp )
{{#if entry}}
var entry = {{{entry}}}
console.log( 'entry :',entry )
{{else}}
var entry
{{/if}}
console.log( '-------------------------' )
console.log( 'form loading' )

//////////////////////////////////////////
////        CREATE UNIQUE ID         //// 
////////////////////////////////////////
function create_uid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
    .toString(16)
    .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
  s4() + '-' + s4() + s4() + s4();
}

////////////////////////////////////
////        INITIALIZE         //// 
//////////////////////////////////
$(document).ready(function(){
  //create a unique id for the form deployment.
  jQuery('#formDelivery').attr("id",formid1);
  //check if the data id was sent as well as the form id
  //switch between component elements and raw elements.
  if (raw == 'component' || raw == 'componentedit') {
    getdatacomp(formdata,idItem,raw)
  } else {
    getdata(formdata,idItem,raw)
  }
});

/////////////////////////////////////////////////////////
////////    GET FORM  AND DATA WITH COMPONENTS /////////
///////////////////////////////////////////////////////
function getdatacomp(formdata,idItem,raw){
  jQuery.ajax({
    'url': '/getdatacomp?formdata='+formdata+'&idItem='+idItem+'&raw='+raw,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
      formatAlpaca(dataSchemaObject)
    }
  });
}

/////////////////////////////////////////
////////    GET FORM  AND DATA /////////
///////////////////////////////////////
function getdata(formdata,idItem,raw){
  jQuery.ajax({
    'url': '/getdata?formdata='+formdata+'&idItem='+idItem+'&raw='+raw,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {

/*

  console.log('//////////////////////dataSchemaObject///////////////////////////')
  console.log( dataSchemaObject )
  console.log('//////////////////////dataSchemaObject///////////////////////////')
*/

      initiateForm(dataSchemaObject)
    }
  });
}

function formatAlpaca(objectOld) {
  var tempSchema ={
    "title" : parentItem.name,
    "type" : "object",
    "properties" : {
    }
  }
  var tempoptions ={
    "form" : {
      "buttons" : {
        "submit" : {
          "title" : "Submit",
          "id" : "submit",
          "click" : ""
        }
      }
    },
    "fields" : {
    },
    "focus" : ""
  }
  for (var i = 0; i < objectOld.formdata.length; i++) {
//Adding dependancies.
if (objectOld.formdata[i].entry.dependencies) {
  tempDepend = [objectOld.formdata[i].entry.dependencies]
} else {
  tempDepend = ''
}
//swithcing for the type of input on alpaca.
switch (true){
  case(objectOld.formdata[i].entry.type =='string'):
  tempSchema.properties[objectOld.formdata[i]['elementID']] = {
    'type' : objectOld.formdata[i].entry.type,
    "title":objectOld.formdata[i].entry.description,
    "dependencies": tempDepend
  }
  tempoptions.fields[objectOld.formdata[i]['elementID']] = {
    "helper":objectOld.formdata[i].entry.detail
  }   
  break;
  case(objectOld.formdata[i].entry.type =='checkbox'):
  tempSchema.properties[objectOld.formdata[i]['elementID']] = {
    "title":objectOld.formdata[i].entry.description,
    "dependencies": tempDepend
  }
  tempoptions.fields[objectOld.formdata[i]['elementID']] = {
    'type' : objectOld.formdata[i].entry.type,
    "rightLabel":[objectOld.formdata[i].entry.detail]
  }   
  break;
  case(objectOld.formdata[i].entry.type =='text'):
  tempSchema.properties[objectOld.formdata[i]['elementID']] = {
    "title":'',
    "dependencies": tempDepend
  }
  tempoptions.fields[objectOld.formdata[i]['elementID']] = {
    "helper":objectOld.formdata[i].entry.description,
    'view' : 'bootstrap-display',
  }  
  break;
  case(objectOld.formdata[i].entry.type =='field'):
  tempSchema.properties[objectOld.formdata[i]['elementID']] = {
    "title":objectOld.formdata[i].entry.description,
    "dependencies": tempDepend,
    
  }
  tempoptions.fields[objectOld.formdata[i]['elementID']] = {
    "helper":objectOld.formdata[i].entry.detail,
    'type' : "select",
    'field':objectOld.formdata[i].entry.objectType
  }
  break;
  default:
  tempSchema.properties[objectOld.formdata[i]['elementID']] = {
    "title":objectOld.formdata[i].entry.description,
    "dependencies": tempDepend
  }
  tempoptions.fields[objectOld.formdata[i]['elementID']] = {
    "helper":objectOld.formdata[i].entry.detail
  }
  break;
}
}

 //Compile the json for the form.
 var data =  {
  formdata : {
    entry : {
      schema :  tempSchema,
      options :  tempoptions
    }
  },  idItem : objectOld.idItem
} 


data.idItem.entry
initiateForm(data)
}



////////////////////////////////////////
////        CREATE THE FORM        //// 
////////////////////////////////////////
function initiateForm(data){
 var form = {
  schema : data.formdata.entry['schema'],
  options : data.formdata.entry['options']
}

/*
console.log('//////////////////////DATA///////////////////////////')
console.log(data)
console.log('//////////////////////DATA///////////////////////////')
*/


 //----------------------------------------------------------------------------------------------
 if (raw!='component' && raw!='componentedit') {
  if (raw!='raw' && raw!='copyraw') {
  //Used for the limiting of visible fields on the form. Specically the 'headings' field.
  //----------------------------------------------------------------------------------------------
  var tableHeadings =[]
  //General Heading error trap.  
  //When the heading is only 1 item , the printing of the headings loops throguh each character . THis checks if it is an array .
  if (!headingsTemp) {
    if (items.entry.headings) {
      var tableHeadings = JSON.parse(JSON.stringify(items.entry.headings))
      if (!(Array.isArray(tableHeadings))) {
        tableHeadings = [tableHeadings]
      }  
    } else {
      var tableHeadings = ['name','detail','userID','id','parentid','childType','description']
    }
  }
//Check if there is an overwrite on the headings.
if(headingsTemp){
 var tableHeadings = headingsTemp
}  
    //check if there is a heading.
    if (tableHeadings) {
      for (key in form.schema['properties']){
        if (jQuery.inArray( key, tableHeadings ) == -1 ) {
          delete form.schema['properties'][key]
        } else {
        }
      }
      for (key in form.schema['options']){
        if (jQuery.inArray( key, tableHeadings ) == -1 ) {
          delete form.schema['options'][key]
        } else {
        }
      }
    }
    //--------------------------------------------------------------------------------
  }
}
$('#'+formid1).html("<div id='form_"+formdata+idItem+formid1+"'></div>")
$("#form_"+formdata+idItem+formid1).html("")
  //Test alpaca form for true , i.e if it exists , then destroy it.
  control = $("#form_"+formdata+idItem+formid1).alpaca("destroy");
  if (control) {
    formInit(form.schema,form.options,data)
  } else { 
    formInit(form.schema,form.options,data)
  }
} 

//////////////////////////////////////
////        CREATE FORM          //// 
////////////////////////////////////
function formInit(schema,options,data){
  //work areound for the special requirments on the submit button.
  if (options) {
    options.form.buttons.submit.click = function(e){
      e.preventDefault()
      var value = this.getValue();
      formPost(value,data)
    }
//Special case varible use to ensure timing issue the index variable passing into the form dropdown.
var arr = options.fields
$.each(arr, function(index, value) { 
  if (arr[index]['type'] == 'select' ) {

 var temp = ''


//Drop down call for the active 
switch (true) {
  case (index =="active"):
  temp = "58fd8d190c8b981ccc7c2402"
  break;
    case (index =="units"):
  temp = "58fdeb040c8b981ccc7c2444"
  break;
  default:
  temp = arr[index]['field']
  break;
}

console.log(index,temp)
 
   arr[index]["dataSource"] = function(callback) {
    jQuery.ajax({
      'async': true,
      'global': false,
      'url': '/getformfield?data='+temp ,
      'success': function (dataSchemaObject) {
        if (dataSchemaObject) {
          var dataSchemaObject = JSON.parse(dataSchemaObject);


 
console.log('/////////////////////////////////////DEBUG THE SELECT DROP DOWN????????????????????????????????????')
console.log(dataSchemaObject)
console.log('/////////////////////////////////////DEBUG THE SELECT DROP DOWN????????????????????????????????????')


          var tempVar =[]
          for (var i = 0; i < dataSchemaObject.length; i++) {
            tempVar.push(dataSchemaObject[i].entry[temp])
          }
          callback(tempVar);
        }  
      }
    }); 
  }
}
});
switch(true){
  //the use button will require the form to remove any element ids as this will be a new entry.
  case(raw=='use'):
  $("#form_"+formdata+idItem+formid1).alpaca({
    "schema": schema,
    "options": options
  });
  break;
  case(raw=='edit'):
  $("#form_"+formdata+idItem+formid1).alpaca({
    "schema": schema,
    "options": options,
    "postRender": function(control) {
      //only set the data if the form is for use.
      if (idItem !='') {
        $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(data.idItem.entry)
      }
    }    
  });
  break;
  case(raw=='raw' || raw=='copyraw'):
  $("#form_"+formdata+idItem+formid1).alpaca({
    "schema": schema,
    "options": options,
    "postRender": function(control) {
      //only set the data if the form is for use.
      if (idItem !='') {
        $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(data.idItem)
      }
    }    
  });
  break;
  case(raw=='self'):
  $("#form_"+formdata+idItem+formid1).alpaca({
    "schema": schema,
    "options": options,
    "postRender": function(control) {
      //only set the data if the form is for use.
      if (idItem !='') {
        $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(data.idItem.entry)
      }
    }    
  });
  break;
  case(raw=='component'):
  $("#form_"+formdata+idItem+formid1).alpaca({
    "schema": schema,
    "options": options,
    "postRender": function(control) {
      //only set the data if the form is for use.
      if (idItem !='') {
        $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(data.idItem.entry)
      }
    }    
  });
  break;

  case(raw=='componentedit'):
  $("#form_"+formdata+idItem+formid1).alpaca({
    "schema": schema,
    "options": options,
    "postRender": function(control) {
      //only set the data if the form is for use.
      if (idItem !='') {
        $("#form_"+formdata+idItem+formid1).alpaca('get').setValue(data.idItem.entry)
      }
    }    
  });
  break;


  default :
  var html = ''
  html += '<div class="alert alert-danger" role="alert"> '
  html += '<strong>'
  html += 'Oh snap!'
  html += '</strong> '
  html += 'Form error , form usage type is not defined.'
  html += '</div>'
  $("#form_"+formdata+idItem+formid1).html(html)
  break;
}
} else {
  var html = ''
  html += '<div class="alert alert-danger" role="alert"> '
  html += '<strong>'
  html += 'Oh snap!'
  html += '</strong> '
  html += 'Form error , This dataset is not a form , Please let us know about this.'
  html += '</div>'
  $("#form_"+formdata+idItem+formid1).html(html)
}
}

//////////////////////////////////////////////
////        SUBMIT BUTTON CLICK          //// 
////////////////////////////////////////////
function formPost(dataset,data){
//work around for naming of the from .
var name = $('#nameArea').val()
var detail = $('#DetailArea').val()
//routing for the various use cases on the switch
switch(true){
  case(raw=='use'):
  var primer = data.idItem
  primer.entry = dataset
  //spice the entry parameter into the form.
  for(var key in entry){
    if(entry.hasOwnProperty(key)){
      primer.entry[key]=entry[key];
    }
  }
  if (name || detail) {
    primer.name = name
    primer.detail = detail
  }
  if (parentid) {
    primer.parentid=parentid
  }
  primer.elementID = ''
  primer.revision = 'created'
  primer.active = "true"
  break;
  case(raw=='self'):
  var primer = data.idItem
  primer.entry = dataset
  primer.revision = 'updated'
  primer.elementID = data.idItem.elementID
  primer.active = "true"
  break;
  case(raw=='edit'):
  var primer = data.idItem
  primer.entry = dataset
  primer.revision = 'updated'
  primer.elementID = data.idItem.elementID
  primer.active = "true"
  break;
  case(raw=='raw'):
  var primer = dataset
  primer.active = "true"
  break;
  case(raw=='copyraw'):
  var primer = dataset
  primer.elementID = ''
  primer.revision = 'created'
  primer.active = "true"
  break;

  case(raw=='component'):
  var primer = {
  }
  primer.entry = dataset
  //spice the entry parameter into the form.
  for(var key in entry){
    if(entry.hasOwnProperty(key)){
      primer.entry[key]=entry[key];
    }
  }
  if (name || detail) {
    primer.name = name
    primer.detail = detail
  }
  if (parentid) {
    primer.parentid=parentid
  }
  primer.elementID = ''
  primer.revision = 'created'
  primer.active = "true"
  break;
  case(raw=='componentedit'):
  var primer = {
  }
  primer.entry = dataset
  //spice the entry parameter into the form.
  for(var key in entry){
    if(entry.hasOwnProperty(key)){
      primer.entry[key]=entry[key];
    }
  }
  if (name || detail) {
    primer.name = name
    primer.detail = detail
  }
  if (parentid) {
    primer.parentid=parentid
  }
  primer.elementID = ''
  primer.revision = 'updated'
  primer.active = "true"
  break;

  default :
  var html = ''
  html += '<div class="alert alert-danger" role="alert"> '
  html += '<strong>'
  html += 'Oh snap!'
  html += '</strong> '
  html += 'Form error , form usage type is not defined.'
  html += '</div>'
  $("#form_"+formdata+idItem+formid1).html(html)
  break;
}

console.log('//////////////////POST DATA/////////////////////////')
console.log(primer)
console.log('//////////////////POST DATA/////////////////////////')

//Jquery send to server
jQuery.ajax({
  'url': '/create',
  'type': 'POST', 
  'dataType': 'json',
  'contentType': 'application/json', 
  'data': JSON.stringify(primer),
  'success': function (dataSchemaObject) {
    $('#myModal').modal('hide')
          //pageLoad(databaseid)
          if (parentItem.route) {
           window.location = parentItem.route
         } else {
           window.location.reload()
         }
       },
       'error' :function (dataSchemaObject) {
        $('#myModal').modal('hide')
    //pageLoad(databaseid)
    if (parentItem.route) {
      window.location = parentItem.route
    } else {
      window.location.reload()
    }
  },
});   


}

</script>