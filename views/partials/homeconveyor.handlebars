 

<!--             Revision History                                                                               -->
<!--             1.20160708 :  New tack on the menu - going to use the table editor( HELL NO ).                 -->
<!--             2.20160713 :  back to first principles , CRUD with handsontbale is extensivly difficult .      -->
<!--             3.20160715 :  fix datatables error on reload , add google map to form for location      .      -->
<!--             3.20160910 :  Try to add a new operation      .                                                -->


<!--             Bugs                                                                                           -->
<!--             1.20160708 :  All of the names on the markers are wrong                                        -->
<!--             1.20160708 :  reset me from node navigation needs to be removed                                -->
 
<div class="container">
<style type="text/css">
  #map_canvas{
    height: 412px;
  }
</style>
<div class="row">
  <div class="col-md-5">
<div style="padding-top: 151px">
  <div id="map_canvas"></div>
</div>
</div>

<div class="col-md-7">
  <div>
  <!-- Nav tabs -->
  <ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#OperationsTab" aria-controls="OperationsTab" role="tab" data-toggle="tab">Operations <img src="http://maps.google.com/mapfiles/ms/icons/blue-dot.png" style="height:20px"></a></li>
    <li role="presentation"><a href="#ConveyorsTab" aria-controls="ConveyorsTab" role="tab" data-toggle="tab">Conveyors <img src="http://maps.google.com/mapfiles/ms/icons/yellow-dot.png" style="height:20px"></a></li>
  </ul>
  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane active" id="OperationsTab">
     <p></p>
     <p>The table below shows the complete collection of operations on Shiftbulk. </p>
     <table id="operationTable" class="table table-bordered table-hover" cellspacing="0" width="100%" style="font-size: 14px;cursor:default;">
      <thead>
        <tr>
          
          <th>Name</th>
          <th>Latitude</th>
          <th>Longitude</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

  </div>
  <div role="tabpanel" class="tab-pane" id="ConveyorsTab">
   <p></p>
   <p>The table below shows the complete collection of conveyors on Shiftbulk.</p>
   <table id="conveyorTable" class="table table-bordered table-hover" cellspacing="0" width="100%" style="font-size: 14px;cursor:default;">
    <thead>
      <tr>
     
          <th>Conveyor Name</th>
          <th>Operation</th>                        
          <th>Latitude</th>
          <th>Longitude</th>
          <th>Length (m)</th>
          <th>Elevation (m)</th>
          <th>Install Power (kW)</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
</div>
</div>
</div>

</div>

</div>





 



 

<p></p>



</div>
 


<script type="text/javascript">
  $('#filters').html('')
  var map;
  var infoWindows = Array();
  var markers = [];
  var markerStorageArray = [];
  var operations =[]
  var conveyors =[]




  var infowindow = new google.maps.InfoWindow({});
  //bouunding box for zoom variable
  var latlngbounds = new google.maps.LatLngBounds();


 


// A $( document ).ready() block.
$( document ).ready(function() {
      //the get get from inputs for all page loading.
      jQuery.ajax({
        'async': true,
        'global': false,
        'url': '/cvpageload',
        'success': function (dataSchemaObject) {   
          var data = jQuery.parseJSON( dataSchemaObject )
          conveyorData = data.cv;
          operationData = data.op;
 

          conveyorData = rebuild(conveyorData)
          operationData = rebuild(operationData)
          buildData()
          loadTables()
          initialize();
       
        }
      });
  });

//restructure the data from the server into the table formating.
function buildData() {


if (operationData.length != 0 ) {
  for (var i = 0; i < operationData.length; i++) {
  operations.push([operationData[i]["Name"],    parseFloat(operationData[i]["Latitude"]),parseFloat(operationData[i]["Longitude"])])
}
}
if (conveyorData.length != 0 ) { 
for (var i = 0; i < conveyorData.length; i++) {
  conveyors.push([conveyorData[i]["Name"],  parseFloat(conveyorData[i]["Latitude"]),parseFloat(conveyorData[i]["Longitude"])])
}
}


}

//The format of the information from the database , although great for databasing , does not suit most javascript intergration viewers and apps. so needs to be changed. Great....
function rebuild(data){
//poulate the array
var temp = []
for (var i = 0; i < data.length; i++) {
  temp.push([])
}
//identify the names to change.
var datasets  = ['_id','Name','Latitude','Longitude','Operation','Conveyor Name']
for (var i = 0; i < data.length; i++) {
  for (var j = 0; j < data[i].length; j++) {
    for (var k = 0; k < datasets.length; k++) {
        if (data[i][j]['Description']==datasets[k]) {
          temp[i][datasets[k]] = data[i][j]['Value']
        }
    }
  }
}

  return temp
}




function initialize() {
  geocoder = new google.maps.Geocoder();
  var latlng = new google.maps.LatLng(0, 0);
  var myOptions = {
    zoom : 1,
    center: latlng,
    mapTypeId: google.maps.MapTypeId.MAPS
  }
  map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
  //bouunding box for zoom variable
  latlngbounds = new google.maps.LatLngBounds();
  setMarkersOperations(operations)
  setMarkersConveyors(conveyors)
  //zoom fit variable
  map.fitBounds(latlngbounds);
}

//conveyors
function setMarkersConveyors(locationsCV) {
  if (locationsCV.length!= null) {
    for (var j = 0; j < locationsCV.length; j++) {
      var temp = locationsCV[j];
      var myLatLng = new google.maps.LatLng(parseFloat(temp[1]),parseFloat( temp[2]));
//bounding box stroage area.
latlngbounds.extend(myLatLng);

var content = "<h5>CV Name : "+locationsCV[j][0]+"<h5>" +
"<p>Lat :"+locationsCV[j][1]+" " +
"Long :"+locationsCV[j][2]+"</p>";

var marker = new google.maps.Marker({
  position: myLatLng,
  map: map,
  icon: 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',        
  animation: google.maps.Animation.DROP,
  title: temp[0],
  zIndex: temp[3],
  info : content,
    infoWindowIndex : j //<---Thats the extra attribute
  });



var infoWindow = new google.maps.InfoWindow({
  content : content
});
google.maps.event.addListener(marker, 'click', function () {
  infowindow.setContent(this.info);
  infowindow.open(map, this);
});
infoWindows.push(infoWindow);
// Push marker to markers array
markers.push(marker);
}
}  
}

//operations
function setMarkersOperations(locations) {
  if (locations.length!= null) {
    for (var i = 0; i < locations.length; i++) {
      var temp = locations[i];
      var myLatLng = new google.maps.LatLng(parseFloat(temp[1]),parseFloat( temp[2]));
//bounding box stroage area.
latlngbounds.extend(myLatLng);
var marker = new google.maps.Marker({
  position: myLatLng,
  map: map,
  icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',        
  animation: google.maps.Animation.DROP,
  title: temp[0],
  zIndex: temp[3],
    infoWindowIndex : i //<---Thats the extra attribute
  });
var content = "<h5>Name : "+locations[i][0]+"<h5>" +
"<p>Lat :"+locations[i][1]+" " +
"Long :"+locations[i][2]+"</p>";
var infoWindow = new google.maps.InfoWindow({
  content : content
});
google.maps.event.addListener(marker, 'click', 
  function(event)
  {
//map.panTo(event.latLng);
//map.setZoom(5);

infoWindows[this.infoWindowIndex].open(map, this);
}
);
infoWindows.push(infoWindow);
// Push marker to markers array
markers.push(marker);
}
} 
}




//here is the array filter for the data set
$('#filterOps').change(function(){
  var operations =[]
  var conveyors =[]
// Loop through markers and set map to null for each
for (var i=0; i<markers.length; i++) {
  markers[i].setMap(null);
}
// Reset the markers array - filter operations
markers = [];
var filterArray = $('#filterOps .selectpicker').val()
if (filterArray != null){
  for (var i = 0; i < operationData.length; i++) {
    for (var j = 0; j < filterArray.length; j++) {
      if (filterArray[j] == operationData[i]["Name"]) {
        operations.push([operationData[i]["Name"],parseFloat(operationData[i]["Latitude"]),parseFloat(operationData[i]["Longitude"])])
      }
    }
  }
// Reset the markers array - filter conveyor
for (var i = 0; i < conveyorData.length; i++) {
  for (var j = 0; j < filterArray.length; j++) {
    if (filterArray[j] == conveyorData[i]["Name"]) {
      conveyors.push([conveyorData[i]["Name"],  parseFloat(conveyorData[i]["486"]),parseFloat(conveyorData[i]["487"])])
    }
  }
}
//bouunding box for zoom variable
latlngbounds = new google.maps.LatLngBounds();
setMarkersOperations(operations)
setMarkersConveyors(conveyors)
//zoom fit variable
map.fitBounds(latlngbounds);
}
})

//here is the array filter for the data set
$('#filterConv').change(function(){
  var operations =[]
  var conveyors =[]


// Loop through markers and set map to null for each
for (var i=0; i<markers.length; i++) {
  markers[i].setMap(null);
}
// Reset the markers array - filter operations
markers = [];


var filterArray = $('#filterConv .selectpicker').val()


if (filterArray != null){
// Reset the markers array - filter conveyor
for (var i = 0; i < conveyorData.length; i++) {
  for (var j = 0; j < filterArray.length; j++) {
    if (filterArray[j] == conveyorData[i]["Name"]) {
      conveyors.push([conveyorData[i]["Name"],  parseFloat(conveyorData[i]["486"]),parseFloat(conveyorData[i]["487"])])
    }
  }
}
}
//bouunding box for zoom variable
latlngbounds = new google.maps.LatLngBounds();
setMarkersOperations(operations)
setMarkersConveyors(conveyors)
//zoom fit variable
map.fitBounds(latlngbounds);
})



 function loadTables() {

////////////////////////////////////////
///////   CONVEYOR TABLE   ///////////
//////////////////////////////////////

//console.log(conveyorData)
var html = ""
for (var i = 0; i < conveyorData.length; i++) {
  html += '<tr id="'+conveyorData[i]["_id"]+'" onclick="viewzoomCV(this.id)">'
 

  html += '<td>'+conveyorData[i]["Name"]+'</td>'
  html += '<td>'+conveyorData[i]['Operation']+'</td>'    
  html += '<td>'+conveyorData[i]["Latitude"]+'</td>'
  html += '<td>'+conveyorData[i]['Longitude']+'</td>'


  html += '<td>'+'N/a'+'</td>'
  html += '<td>'+'N/a'+'</td>'
  html += '<td>'+'N/a'+'</td>'
  html += '</tr>'
}

$('#conveyorTable tbody').html(html)

var tableCV = $('#conveyorTable').DataTable({
  "destroy":true,
  "pagingType": "numbers",
});
// Add event listener for opening and closing details
 


////////////////////////////////////////
///////   OPERATION TABLE   ///////////
//////////////////////////////////////

var html = ""
for (var i = 0; i < operationData.length; i++) {
  html += '<tr id="'+operationData[i]['_id']+'" onclick="viewzoomOP(this.id)">'
 
  html += '<td>'+operationData[i]['Name']+'</td>'
  html += '<td>'+operationData[i]['Latitude']+'</td>'
  html += '<td>'+operationData[i]['Longitude']+'</td>'
  html += '</tr>'
}

$('#operationTable tbody').html(html)
var table = $('#operationTable').DataTable({
  "destroy":true,
  "pagingType": "numbers",
});
// Add event listener for opening and closing details
 
} 
 


 


////////////////////////////////////////////////////////////////////
////////////        FORMIDABLE VIEW EXTRA DETAIL         ///////////
///////////////////////////////////////////////////////////////////
function formatDefaultconveyors ( d ) {
  //console.log('entering formatDefault')
  // `d` is the original data object for the row

  var html=''
  html='<h4>Options</h4>'
  html += '<div id="'+d+'_content" style="padding-top:0px;text-align:left">'


  html += '<div class="btn-group" role="group" aria-label="..." style="padding-bottom:15px">'
  html += '<button type="button" class="btn btn-default" id="'+d+'" onclick="viewzoomCV(this.id)" data-toggle="tooltip" data-placement="top" title="View conveyor."><img src="http://maps.google.com/mapfiles/ms/icons/yellow-dot.png" style="height:15px;"> View</button>'
  html += '</div>'
 
  html += '<div class="btn-group" role="group" aria-label="..." style="padding-bottom:15px;padding-left:15px">'

  html += '<button type="button" class="btn btn-default" id="'+d+'" onclick="getconveyorDefault(id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">Modify</button>'
  html += '<button type="button" class="btn btn-default" data-_id="'+d+'" id="'+d+'_downloadlink" data-toggle="modal" data-target="#myModal" onclick="deleteConveyormodal(this.id)"  data-toggle="tooltip" data-placement="top" title="Delete this item">Delete</button>'

  html += '</div>'
  html += '</div>'
  return html;
}

////////////////////////////////////////////////////////////////////
////////////        FORMIDABLE VIEW EXTRA DETAIL         ///////////
///////////////////////////////////////////////////////////////////
function formatDefaultoperations ( d ) {
  //console.log('entering formatDefault')
  // `d` is the original data object for the row
  var html=''
  html='<h4>Options</h4>'
  html += '<div id="'+d+'_content" style="padding-top:0px;text-align:left">'

  html += '<div class="btn-group" role="group" aria-label="..." style="padding-bottom:15px">'
  html += '<button type="button" class="btn btn-default" id="'+d+'" onclick="viewzoomOP(this.id)" data-toggle="tooltip" data-placement="top" title="View operation."><img src="http://maps.google.com/mapfiles/ms/icons/blue-dot.png" style="height:15px"> View</button>'
  html += '</div>'


  html += '<div class="btn-group" role="group" aria-label="..." style="padding-bottom:15px;padding-left:15px">'
  html += '<button type="button" class="btn btn-default" id="'+d+'" onclick="getoperationDefault(id)"  data-toggle="modal" data-target="#myModal" data-toggle="tooltip" data-placement="top" title="Edit ths item.">Modify</button>'
  html += '<button type="button" class="btn btn-default" data-_id="'+d+'" id="'+d+'_downloadlink" data-toggle="modal" data-target="#myModal" onclick="deleteOperationmodal(this.id)"  data-toggle="tooltip" data-placement="top" title="Delete this item">Delete</button>'

  html += '</div>'
  html += '</div>'
  return html;
}

////////////////////////////////////////// 
//////  MAP  ZOOM VIEW CONVEYORS   //////
/////////////////////////////////////////
function viewzoomCV(_id){
  for (var i = 0; i < conveyorData.length; i++) {
    if (_id == conveyorData[i]['_id']) {
      console.log()
      var latLng = new google.maps.LatLng(conveyorData[i]['Latitude'], conveyorData[i]['Longitude']);
      map.panTo(latLng);
      map.setZoom(16);
      map.setMapTypeId('hybrid');
    }
  }
}

////////////////////////////////////////// 
//////  MAP  ZOOM VIEW OPERATIONS   //////
/////////////////////////////////////////
function viewzoomOP(_id){
 _id = _id.replace('', '');
 for (var i = 0; i < operationData.length; i++) {
  if (_id == operationData[i]['_id']) {
    console.log()
    var latLng = new google.maps.LatLng(operationData[i]['Latitude'], operationData[i]['Longitude']);
    map.panTo(latLng);
    map.setZoom( 13);
    map.setMapTypeId('hybrid');
  }
}
}

////////////////////////////////// 
//////  CREATE CONVEYOR    //////
//////////////////////////////// 
function addConveyor(){
 var menuitem = '5848fcb0b622bb53eca6ffd8'
 $('#myModalLabel').html('Add Conveyor')
 $('#formRender').html('')
 jQuery.ajax({
  'async': true,
  'global': false,
  'url': '/getformdbinput?data='+menuitem,
  'success': function (dataSchemaObject) {
    $('#formRender').html('')
    $('#formRender').html(dataSchemaObject)
  }
});
}

///////////////////////////////// 
//////  READ CONVEYOR     //////
/////////////////////////////// 
function readconveyor(id){
 $('#myModalLabel').html('Modify Conveyor')
 $('#formRender').html('')
 jQuery.ajax({
  'async': true,
  'global': false,
  'url': '/readcv?data='+id,
  'success': function (dataSchemaObject) {
    $('#formRender').html('')
    $('#formRender').html(dataSchemaObject)
  }
});
}


///////////////////////////////// 
//////  DELETE CONVEYOR  ///////
/////////////////////////////// 
function deleteConveyormodal(id){
 $('#myModalLabel').html('Delete Conveyor')
 _id = $( "#"+id ).data( "_id" )  
 html = ''
 html +='<div class="row" style="width:100%;text-align:center">'
 html +='<i class="fa fa-question-circle fa-4x" aria-hidden="true" ></i>'
 html += '<h3>Are you sure you what to do this ?</h3>'
 html += '<p>This action cannot be undone.</p>'
 html +='<div class="btn-group" role="group" aria-label="..." style="align:center">'
 html +='  <button type="button" class="btn btn-danger" onclick="deleteConveyor('
 html +="'"
 html +=_id
 html +="'"
 html +=')">Confirm</button>'
 
 html +='</div>'
 $('#formRender').html(html)
}

function deleteConveyor(_id){
  //always create at the selected node
  var json = {
    '_id' : _id,
  }
  jQuery.ajax({
    'url': '/deletecv',
    'type': 'POST', 
    'contentType': 'application/json', 
    'data': JSON.stringify(json),
    'success': function (redirectTo) {
      console.log(redirectTo)
      window.location = redirectTo.redirectTo;
    }  
  })
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////// 
//////  CREATE OPERATION   //////
//////////////////////////////// 
function addOperation(){
 $('#myModalLabel').html('Add Operations')
 $('#formRender').html('')
 jQuery.ajax({
  'async': true,
  'global': false,
  'url': '/getformop',
  'success': function (dataSchemaObject) {
    $('#formRender').html('')
    $('#formRender').html(dataSchemaObject)
  }
});
}

///////////////////////////////// 
//////  READ OPERATION    //////
/////////////////////////////// 
function readOperation(_id){
   //required to remove the duplicate _idS on the table elements.
   _id = _id.replace('', '');
   $('#myModalLabel').html('Modify Operation')
   $('#formRender').html('')
   jQuery.ajax({
    'async': true,
    'global': false,
    'url': '/alpacaread?data='+_id,
    'success': function (dataSchemaObject) {
      $('#formRender').html('')
      $('#formRender').html(dataSchemaObject)
    }
  });
 }

///////////////////////////////// 
//////  DELETE CONVEYOR  ///////
/////////////////////////////// 
function deleteOperationmodal(id){
  $('#myModalLabel').html('Delete Operation')
  _id = $( "#"+id ).data( "_id" )  
  html = ''
  html +='<div class="row" style="width:100%;text-align:center">'
  html +='<i class="fa fa-question-circle fa-4x" aria-hidden="true" ></i>'
  html += '<h3>Are you sure you what to do this ?</h3>'
  html += '<p>Use the revision area to restore deleted items.</p>'
  html +='<div class="btn-group" role="group" aria-label="..." style="">'
  html +='  <button type="button" class="btn btn-danger" onclick="deleteOperation('
  html +="'"
  html +=_id
  html +="'"
  html +=')">Confirm</button>'
  html +='</div>'
  html +='</div>'
  $('#formRender').html(html)
}

function deleteOperation(_id){
    //required to remove the duplicate IDS on the table elements.
    _id = _id.replace('', '');
    //always create at the selected node
    var json = {
      '_ids' : _id,
      'action' : 'delete',
    }
    jQuery.ajax({
      'url': '/deleteentry',
      'type': 'POST', 
      'contentType': 'application/json', 
      'data': JSON.stringify(json),
      'success': function (redirectTo) {
        window.location = ('/conveyors');
      }  
    })
  }



function getconveyorDefault(id){
  formtoggles('5848fcb0b622bb53eca6ffd8',id)
}

function getoperationDefault(id){
  formtoggles('58491facd631cc30908f64c2',id)
}


/////////////////////////////////////////
//////  GET THE COLLECTION FORM   //////
///////////////////////////////////////
function formtoggles(id,itemID){
  console.log(id,itemID)
  $('#title').html(''+$('#'+id).html()+'')
  jQuery.ajax({
    'url': '/getformcollection?data='+id,
    'async': true,
    'global': false,
    'success': function (dataSchemaObject) {
      $('#formRender').html('')
      $('#formRender').html(dataSchemaObject)
      poulatealpacas(itemID)
    }
  });
}

///////////////////////////////////////////////////
////////    ALPACA FORM DATA TRANSPOSE    ////////
/////////////////////////////////////////////////
function poulatealpacas(id){
  jQuery.ajax({
    'async': true,
    'global': false,
    'url': '/getdatainputs?data='+id,
    'success': function (dataSchemaObject) {
      
        var data = jQuery.parseJSON( dataSchemaObject );
        var temp 
        temp = data[0].entry
        console.log($("#form1").alpaca())

        //$("#form1").alpaca('get').setValue(temp)
        //used to trigger the movement of the map and zoom.
        //triggerlatlongchange()
     }
  });
}

  $(function () {
    $('[data-toggle="tooltip"]').tooltip()
  })

</script>



